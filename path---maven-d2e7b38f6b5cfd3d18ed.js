webpackJsonp([0x9c6572f42738],{461:function(e,n){e.exports={data:{markdownRemark:{html:'<h2>Goals</h2>\n<pre><code class="language-zsh">mvn clean\n</code></pre>\n<pre><code class="language-zsh">mvn package\n</code></pre>\n<p>To display a POM that includes all of the inherited properties, execute:</p>\n<pre><code class="language-zsh">mvn help:effective-pom\n</code></pre>\n<h2>Dependency Scope</h2>\n<ul>\n<li>Compile: Default. Available on all classpaths of project. Also, propagated to downstream projects.</li>\n<li>Provided: Like Compile, but expected to be provided by JDK or container at runtime.</li>\n<li>Runtime: Not required for compile, but needed for runtime. On runtime and test classpaths, not compile.</li>\n<li>Test: Only available on test classpath, not transitive.</li>\n<li>System: similar to provided, but jar is added to system explicitly (via file path)</li>\n<li>Import: imports dependency of POM</li>\n</ul>\n<h4>Dependency plugin goals</h4>\n<ul>\n<li>dependency:tree</li>\n<li>dependency:go-offline</li>\n<li>dependency:purge-local-repository</li>\n<li>dependency:sources</li>\n</ul>\n<h2>Maven Build Lifecycles</h2>\n<p>Maven is based on the concept of build lifecycles.\nA licecycle is a pre-defined group of build steps called <strong>phases</strong>.\nEach phase can be bound to one or more plugin <strong>goals</strong>.\nAll work done in Maven is done by plugins.\nLifecycles and phases provide the framework to call plugin goals in a sequence.</p>\n<p>There are three pre-defined lifecycles:</p>\n<ul>\n<li>clean</li>\n<li>default: does the build and deployment of the project. It is defined without plugin bindings, bindings are defined for each packaging. The default lifecycle include the phases but a number of them are not mentioned: validate, compile, test, package, verify, install and deploy.</li>\n<li>site: least used in practice</li>\n</ul>\n<p>For instance phases of the default lifecycle involved in the case of a jar\npackaging are the following:</p>\n<ul>\n<li>process-resources (maven-resources-plugin: resources)</li>\n<li>compile (maven-compiler-plugin: compile)</li>\n<li>process-test-resources (maven-compiler-plugin: testResources)</li>\n<li>test-compile (maven-compiler-plugin: testCompile)</li>\n<li>test (maven-surefire-plugin: jar)</li>\n<li>package (maven-jar-plugin: jar)</li>\n<li>install (maven-install-plugin: install)</li>\n<li>deploy (maven-deploy-plugin: deploy)</li>\n</ul>\n<h2>Maven configuration â€” <code>settings.xml</code></h2>',frontmatter:{title:"Maven",date:"August 27, 2022",path:"/maven",tags:["maven","devops","continuous integration","build","java","kotlin"],excerpt:""}}},pathContext:{prev:{html:'<h2>Deleting a commit</h2>\n<p>The --soft flag ensures changes from the deleted commit remain staged:</p>\n<pre><code class="language-zsh">git reset --soft HEAD~1\n</code></pre>\n<h2>Rebasing to the tip of local main branch</h2>\n<pre><code class="language-zsh">git rebase main\ngit push --force-with-lease\n</code></pre>\n<p>In case there are conflict execute commands like <code>git add ...</code> and <code>git rebase --continue</code></p>\n<p>When relevant, priority can be given to feature branch changes with:</p>\n<pre><code class="language-zsh">git rebase --main -Xtheirs\n</code></pre>\n<p>followed with:</p>\n<pre><code class="language-zsh">git push --force\n</code></pre>\n<h2>Updating the local branch with respect to remote</h2>\n<pre><code class="language-zsh">git pull --rebase\n</code></pre>\n<h2>Interactive rebase</h2>\n<pre><code class="language-zsh">git log --oneline --decorate --all --graph\n</code></pre>\n<pre><code class="language-zsh">git rebase --interactive HEAD~3\n</code></pre>\n<pre><code class="language-zsh">git push --force origin feat/add-my-feature\n</code></pre>\n<h2>Get back to older commit after several commits pushed to the remote</h2>\n<p>Use <code>git log</code> and <code>git reflog</code> to identify the\ncommit to target and get its sha1, say COMMIT_HASH</p>\n<p>Get back to that commit with:</p>\n<pre><code class="language-zsh">git reset --hard COMMIT_HASH\n</code></pre>\n<p>Finally, push with:</p>\n<pre><code class="language-zsh">git push origin feat/opensearch_operator --force-with-lease\n</code></pre>',id:"C:/Users/nicolas.peron/github.com/nperon/workshop/src/pages/2022-08-20-git/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2022-08-20T23:16:22.342Z",path:"/git",title:"Git",excerpt:"",tags:["git","devops"]}},next:{html:'<p>Keytool is a tool used to manage java keystores. It allows to do the following:</p>\n<ul>\n<li>listing keystore contens</li>\n<li>changing (add/remove) keys and certificates</li>\n<li>generating keys and key pairs</li>\n</ul>\n<p>Help command is just</p>\n<pre><code class="language-bash">keytool -h\n</code></pre>\n<p>Command to generate a key pair:</p>\n<pre><code class="language-bash">keytool -genkeypair -alias myalias -keyalg RSA -keysize 2048 -validity 730 -keystore ownjavakeystore.jks\n</code></pre>\n<pre><code class="language-bash"></code></pre>\n<pre><code class="language-bash"></code></pre>\n<pre><code class="language-bash"></code></pre>',id:"C:/Users/nicolas.peron/github.com/nperon/workshop/src/pages/2024-04-28-keytool/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2024-04-28T14:02:00.438Z",path:"/keytool",title:"Keytool",excerpt:"",tags:["java","security","tls","ssl","keytool"]}}}}}});
//# sourceMappingURL=path---maven-d2e7b38f6b5cfd3d18ed.js.map