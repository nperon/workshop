webpackJsonp([0xf0c0884b9551],{379:function(e,n){e.exports={data:{markdownRemark:{html:'<h2>JSON stringify improved</h2>\n<p>The following is a function which stringifies an object to the required level.</p>\n<pre><code class="language-javascript">function stringify(val, depth, replacer, space) {\n    depth = isNaN(+depth) ? 1 : depth;\n    function _build(key, val, depth, o, a) {\n        return !val || typeof val != \'object\' ? val : (a=Array.isArray(val), JSON.stringify(val, function(k,v){ if (a || depth > 0) { if (replacer) v=replacer(k,v); if (!k) return (a=Array.isArray(v),val=v); !o &#x26;&#x26; (o=a?[]:{}); o[k] = _build(k, v, a?depth:depth-1); } }), o||(a?[]:{}));\n    }\n    return JSON.stringify(_build(\'\', val, depth), null, space);\n}\n</code></pre>\n<p>The stringification level is the second argument of the function:</p>\n<pre><code class="language-javascript">const value={a:[12,2,{y:3,z:{q:1}}],s:\'!\',o:{x:1,o2:{y:1}}};\nconsole.log(stringify(value, 0, null, 2));\nconsole.log(stringify(value, 1, null, 2));\nconsole.log(stringify(value, 2, null, 2));\n</code></pre>\n<h2>Memoization</h2>\n<p>In the following snippet, function memoization is implemented with some convenient functional programming features of javascript.</p>\n<pre><code class="language-javascript">const memoize = (fn) => {\n  let cache = {};\n  return (...args) => {\n    let n = args[0];\n    if (n in cache) {\n      return cache[n];\n    }\n    else {\n      let result = fn(n);\n      cache[n] = result;\n      return result;\n    }\n  }\n}\n</code></pre>\n<p>This memoize function can be\nused for instance in calculating Fibonacci\nseries as follows:</p>\n<pre><code class="language-javascript">const memoizeFib = memoize(fib);\n\nfunction fib(num) {\n  switch (num) {\n    case 0: {\n      return 0;\n    }\n    case 1: {\n      return 1;\n    }\n    default: {\n      return memoizeFib(num-2)+memoizeFib(num-1); \n    }\n  }\n}\n</code></pre>\n<p>The following is a slightly different version of memoize.\nArguments of the function, which operate as the cache keys,\nare stringified: </p>\n<pre><code class="language-javascript">const memoize = (fn) => {\n  let cache = {};\n  return (...args) => {\n    let stringifiedArgs = JSON.stringify(args);\n    let result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn(...args);\n    return result;\n  }\n}\n</code></pre>',frontmatter:{title:"ES6 toolbox",date:"July 21, 2018",path:"/es6-toolbox",tags:["javascript","es6","toolbox","utils","functional programming","memoization"],excerpt:""}}},pathContext:{prev:{html:'<h3>Getting a letsencrypt certificate on a host with shell access</h3>\n<p>Use the Certbot ACME client documented in the <a href="https://certbot.eff.org">certbot pages</a>.</p>\n<h3>Decoding and evaluating the generated TLS certificate</h3>\n<ul>\n<li>\n<p>paste the certificate contained in the <code>cert.pem</code> file found somewhere under the\n<code>/etc/letsencrypt</code> directory into the form provided\nin the <a href="https://www.sslshopper.com/certificate-decoder.html">SSLHopper pages</a>.\nThe same test can be done with the <code>chain.pem</code> or with\nthe <code>fullchain.pem</code> file.</p>\n</li>\n<li>\n<p>paste the domain of the site to be evaluated into the form found in\nthe SSL Server test page of the <a href="https://www.ssllabs.com/ssltest/">www.ssllabs.com/ssltest/</a>.</p>\n</li>\n<li>\n<p>another similar test is available at <a href="https://www.digicert.com/help">www.digicert.com/help</a>.</p>\n</li>\n</ul>',id:"/home/nicolas/Documents/workshop/src/pages/2020-11-01-transport-layer-security/index.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2020-11-01T21:15:34.235Z",path:"/transport-layer-security",title:"Transport Layer Security",excerpt:"",tags:["TLS","web security","TLS certificate"]}},next:null}}}});
//# sourceMappingURL=path---es-6-toolbox-7c4e798506045db0bde1.js.map