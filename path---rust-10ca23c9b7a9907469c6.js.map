{"version":3,"sources":["webpack:///path---rust-10ca23c9b7a9907469c6.js","webpack:///./.cache/json/rust.json"],"names":["webpackJsonp","433","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8+KAA4iLC,aAAgCC,MAAA,OAAAC,KAAA,oBAAAC,KAAA,QAAAC,MAAA,QAAAC,QAAA,MAAwFC,aAAgBC,MAAQR,KAAA,isIAA43DS,GAAA,+GAAAR,aAA2/EE,KAAA,2BAAAC,KAAA,eAAAF,MAAA,cAAAI,QAAA,GAAAD,MAAA,sDAAwJK,MAASV,KAAA,wgBAAAS,GAAA,4GAAAR,aAAypBE,KAAA,2BAAAC,KAAA,YAAAF,MAAA,WAAAI,QAAA,GAAAD,MAAA","file":"path---rust-10ca23c9b7a9907469c6.js","sourcesContent":["webpackJsonp([101400775151803],{\n\n/***/ 433:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Cargo commands</h2>\\n<p>Command to create a project:</p>\\n<pre><code class=\\\"language-bash\\\">cargo new hello\\n</code></pre>\\n<p>You can compile and run the project now with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run\\n</code></pre>\\n<p>This builds the project in a directory called <code>target/debug</code>.\\nTo build the project in the <code>target/release</code> directory intended for prod, just run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run --release\\n</code></pre>\\n<p>A good tip to improve the code with idiomatic rust coding hints/warnings is to run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo clippy\\n</code></pre>\\n<h2>Strings</h2>\\n<p>String slices refered to as <code>str</code>\\nare almost always handled in the shape of borrowed string slices <code>&#x26;str</code>.\\nSee also the Rust documentation on <a href=\\\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\\\">references and borrowing</a>.</p>\\n<p>A string literal stated\\n<code>let msg = \\\"Hello ðŸŒŽ\\\";</code>\\nis a borrowed string slice.</p>\\n<p>The other string type is String.\\nData in a borrowed string slice cannot be modified\\nwhile data in a String can be modified.</p>\\n<p>A String can be obtained by applying the to_string() method on a\\nborrowed string slice:</p>\\n<pre><code>let msg = \\\"abðŸŽ‰\\\".to_string();\\n</code></pre>\\n<p>or else by passing the borrowed string slice to String::from:</p>\\n<pre><code>let msg = String::from(\\\"abðŸŽ‰\\\");\\n</code></pre>\\n<p>Internally, a borrowed string slice is made up of a pointer to some byte and\\na length. The length is the number of unicode characters in the string.</p>\\n<p>Bytes can be extracted from a borrowed string slice with the bytes() method: <code>word.bytes();</code></p>\\n<p>An iterator on unicode scalars can be built with <code>word.chars();</code></p>\\n<p>Additionally, an iterator on graphemes can be retrieved using a package called unicode-segmentation with:</p>\\n<p><code>graphemes(my_string, true)</code></p>\\n<p>A given item in the graphemes can then be accessed with by appending a statement like<code>.nth(3)</code></p>\\n<p>All of the helper methods to manipulate String objects are documented\\n<a href=\\\"https://doc.rust-lang.org/std/string/struct.String.html#method.bytes\\\">here</a>.</p>\\n<h2>Structs and Traits</h2>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct RedFox {\\n    enemy: bool,\\n    life: u32,\\n}\\n\\ntrait Noisy {\\n    fn get_noise(&#x26;self) -> &#x26;str;\\n}\\n\\nimpl Noisy for RedFox {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"Meow?\\\" }\\n}\\n\\nfn print_noise&#x3C;T: Noisy>(item: T) {\\n    println!(\\\"\\\", item.get_noise());\\n}\\n\\nimpl Noisy for u8 {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"BYTE!\\\" }\\n}\\n\\nfn main() {\\n    print_noise(5_u8); // prints \\\"BYTE!\\\"\\n}\\n</code></pre>\\n<h2>Vectors</h2>\\n<pre><code class=\\\"language-rust\\\">let mut v: Vec&#x3C;i32> = Vec::new();\\nv.push(2);\\nv.push(4);\\nv.push(6);\\nlet x = v.pop();    // x is 6\\nprintln(\\\"{}\\\", v[1]);// prints \\\"4\\\"\\nlet mut u = vec![2, 4, 6];\\n</code></pre>\\n<h2>Hashmaps</h2>\\n<pre><code class=\\\"language-rust\\\">let mut h: HashMap&#x3C;u8, bool> = HashMap::new();\\nh.insert(5, true);\\nh.insert(6, false);\\nlet have_five = h.remove(&#x26;5).unwrap();\\n</code></pre>\\n<p>Other collections: VecDeque, LinkedList, HashSet, BinaryHeap, BTreeMap, BTreeSet</p>\\n<h2>Enums</h2>\\n<pre><code class=\\\"language-rust\\\">enum Color {\\n    Red,\\n    Green,\\n    Blue,\\n}\\nlet color = Color::Red;\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">enum DispenserItem {\\n    Empty,\\n    Ammo(u8),\\n    Things(String, i32),\\n    Place {x: i32, y: i32},\\n}\\n\\nuse DispenserItem::*;\\nlet item1 = Ammo(69);\\nlet item2 = Things(\\\"hat\\\".to_string(), 7);\\n</code></pre>\\n<h3>The rust predefined Option enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Option&#x3C;T> {\\n    Some(T),\\n    None,\\n}\\n\\nlet mut x: Option&#x3C;i32> =  None;\\nx = Some(5);\\nx.is_some(); // true\\nx.is_none(); false\\nfor i in x {\\n    println!(\\\"{}\\\", i); // prints 5\\n}\\n</code></pre>\\n<h3>The rust predefined Result enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Result&#x3C;T, E> {\\n    Ok(T),\\n    Err(E),\\n}\\n</code></pre>\\n<p>Example with Result:</p>\\n<pre><code class=\\\"language-rust\\\">use std::fs::File;\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.unwrap();\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.expect(\\\"error message\\\");\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.is_ok() {\\n        let f = res.unwrap();\\n    }\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    match res {\\n        Ok(f) => { /* do stuff */ },\\n        Err(e) => { /* do stuff */ },\\n    }\\n}\\n</code></pre>\\n<h3>Ownership, references  &#x26; borrowing</h3>\\n<p>There are 3 rules to ownership:</p>\\n<ol>\\n<li>Each value has an owner</li>\\n<li>There is only one owner of a value</li>\\n<li>Value gets dropped if its owner goes out of scope</li>\\n</ol>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;mut i32\\n*x // a mutable i32\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;i32\\n*x: // an immutable i32\\n</code></pre>\\n<p>At any time, it is possible to have one mutable reference\\nor any number of immutable references to a given value.</p>\\n<p>A borrowed variable passed to a function can be dereferenced in two ways.\\nThe first way is automated deferencing:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    s.insert_str(0, \\\"Hi, \\\");\\n}\\n</code></pre>\\n<p>And the second way is manual:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    *s = String::from(\\\"Replacement\\\")\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"Rust\",\"date\":\"February 06, 2022\",\"path\":\"/rust\",\"tags\":[\"rust\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h3>Miscelaneous bash tips</h3>\\n<p>The following command displays the status code from the last command:</p>\\n<pre><code class=\\\"language-bash\\\">echo $?\\n</code></pre>\\n<p>In the following command, output of a echo command is directed to\\nstandard input so that a second command viz more manages it like a file:</p>\\n<pre><code class=\\\"language-bash\\\">echo 'toto' | more -\\n</code></pre>\\n<h3>tree</h3>\\n<pre><code class=\\\"language-bash\\\">tree --noreport .\\n</code></pre>\\n<h3>vi</h3>\\n<p>Vi command for eliminating all occurences of colon \\\":\\\" is the following:</p>\\n<pre><code>:1,$s/://g\\n</code></pre>\\n<p>Here is the vi command for replacing all occurences of \\\"old\\\" with \\\"new\\\":</p>\\n<pre><code>:1,$s/old/new/g\\n</code></pre>\\n<p>Vi command for searching string \\\"xyz\\\":</p>\\n<pre><code>/xyz\\n</code></pre>\\n<h3>find</h3>\\n<p>File search:</p>\\n<pre><code class=\\\"language-bash\\\">find ./fvsa/ -name \\\"pvsve*\\\"\\n</code></pre>\\n<h3>grep</h3>\\n<p>Search string 'yourDir' in dir yourdir:</p>\\n<pre><code class=\\\"language-bash\\\">grep -nr 'yourString*' yourdir\\n</code></pre>\\n<h3>sed</h3>\\n<p>Sed is a stream editor for filtering and transforming text.</p>\\n<pre><code class=\\\"language-bash\\\">sed -i 's/word1/word2/g' inputfile\\n</code></pre>\\n<p>The <code>-i</code> option requests editing in place.\\n<code>s</code> stands for substitute. <code>g</code> stands for global replacement.</p>\\n<h3>A few tips with watch:</h3>\\n<p>Memory usage:</p>\\n<pre><code class=\\\"language-bash\\\">watch -n 5 free -m\\n</code></pre>\\n<p>Realtime clock in a term:</p>\\n<pre><code class=\\\"language-bash\\\">watch -n 1 date\\n</code></pre>\\n<h3>Modify filenames with rename</h3>\\n<p>Delete 4 first characters in all file names in dir:</p>\\n<pre><code class=\\\"language-bash\\\">rename 's/.{4}(.*)/$1/' *\\n</code></pre>\\n<p>Delete 5 last characters in all file names in dir:</p>\\n<pre><code class=\\\"language-bash\\\">rename 's/(.*).{5}/$1/' *\\n</code></pre>\\n<h3>wc</h3>\\n<p>Display total number of files in 'folder':</p>\\n<pre><code class=\\\"language-bash\\\">ls folder | wc -l\\n</code></pre>\\n<h3>Disk usage</h3>\\n<pre><code class=\\\"language-bash\\\">sudo ncdu -rx /\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">sudo du -shc /*\\n</code></pre>\\n<p>Displaying size occupied by Documents directory:</p>\\n<pre><code class=\\\"language-bash\\\">cd ~\\nsudo du -sh Documents\\n</code></pre>\\n<h3>Managing JDKs on Debian</h3>\\n<pre><code class=\\\"language-bash\\\">update-java-alternatives -l\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">sudo update-java-alternatives -s java-1.8.0-openjdk-amd64\\n</code></pre>\\n<p>Or in a more interactive way:</p>\\n<pre><code class=\\\"language-bash\\\">update-alternatives --config java\\n</code></pre>\\n<h3>Managing screens</h3>\\n<pre><code class=\\\"language-bash\\\">xrandr\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">xrandr --addmode HDMI-1 2560x1080\\n</code></pre>\\n<h3>Serving static content using http-server</h3>\\n<p>The following command starts http-server and serves all of the static\\ncontent (e.g. geojson files) available in the current directory:</p>\\n<pre><code class=\\\"language-bash\\\">http-server --cors='*' -p 5252\\n</code></pre>\\n<h3>Generating random passwords</h3>\\n<p>Install pwgen package and run the following command to\\nget a randow password with 12 characters including one special\\ncharacter at least:</p>\\n<pre><code class=\\\"language-bash\\\">pwgen 12 1 -y\\n</code></pre>\\n<h3>Managing permissions</h3>\\n<p>Command to state that owner and group of directory mydir have full permission\\nto access the directory and its content such as read, write and execute whereas\\nothers will have read and execute permission:</p>\\n<pre><code class=\\\"language-bash\\\">chmod -R 775 mydir\\n</code></pre>\\n<h3>Probing system on service management tool</h3>\\n<p>The following command can be use to check whether the service\\nmanagement tool is <code>service</code> or <code>systemctl</code>:</p>\\n<pre><code class=\\\"language-bash\\\">ps --no-headers -o comm 1\\n</code></pre>\\n<p>A <code>systemd</code> result indicates that systemd (systemctl) is the service management tool, while\\n<code>init</code> indicates that it is System V Init (service).</p>\\n<h3>Managing DNS</h3>\\n<pre><code class=\\\"language-bash\\\">sudo apt install bind9-host\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">host -t NS google.com\\n</code></pre>\",\"id\":\"/home/nicolas/projects/workshop/src/pages/2020-10-11-linux-utils/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-10-11T22:47:32.235Z\",\"path\":\"/linux-utils\",\"title\":\"Linux Utils\",\"excerpt\":\"\",\"tags\":[\"Linux\",\"utils\",\"bash\",\"vi\",\"find\",\"grep\",\"rename\"]}},\"next\":{\"html\":\"<ul>\\n<li><a href=\\\"https://docs.starport.network/guide/\\\">Starport tutorial</a></li>\\n<li><a href=\\\"http://localhost:1317/\\\">swagger view of the high-level blockchain API</a></li>\\n</ul>\\n<p>Execute <code>starport version</code> to find out your installed starport version</p>\\n<pre><code class=\\\"language-bash\\\">starport scaffold chain github.com/cosmonaut/hello\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">starport scaffold --help\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">starport chain serve\\n</code></pre>\",\"id\":\"/home/nicolas/projects/workshop/src/pages/2022-02-18-starport/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-02-18T10:17:00.823Z\",\"path\":\"/starport\",\"title\":\"Starport\",\"excerpt\":\"\",\"tags\":[\"starport\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---rust-10ca23c9b7a9907469c6.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Cargo commands</h2>\\n<p>Command to create a project:</p>\\n<pre><code class=\\\"language-bash\\\">cargo new hello\\n</code></pre>\\n<p>You can compile and run the project now with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run\\n</code></pre>\\n<p>This builds the project in a directory called <code>target/debug</code>.\\nTo build the project in the <code>target/release</code> directory intended for prod, just run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run --release\\n</code></pre>\\n<p>A good tip to improve the code with idiomatic rust coding hints/warnings is to run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo clippy\\n</code></pre>\\n<h2>Strings</h2>\\n<p>String slices refered to as <code>str</code>\\nare almost always handled in the shape of borrowed string slices <code>&#x26;str</code>.\\nSee also the Rust documentation on <a href=\\\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\\\">references and borrowing</a>.</p>\\n<p>A string literal stated\\n<code>let msg = \\\"Hello ðŸŒŽ\\\";</code>\\nis a borrowed string slice.</p>\\n<p>The other string type is String.\\nData in a borrowed string slice cannot be modified\\nwhile data in a String can be modified.</p>\\n<p>A String can be obtained by applying the to_string() method on a\\nborrowed string slice:</p>\\n<pre><code>let msg = \\\"abðŸŽ‰\\\".to_string();\\n</code></pre>\\n<p>or else by passing the borrowed string slice to String::from:</p>\\n<pre><code>let msg = String::from(\\\"abðŸŽ‰\\\");\\n</code></pre>\\n<p>Internally, a borrowed string slice is made up of a pointer to some byte and\\na length. The length is the number of unicode characters in the string.</p>\\n<p>Bytes can be extracted from a borrowed string slice with the bytes() method: <code>word.bytes();</code></p>\\n<p>An iterator on unicode scalars can be built with <code>word.chars();</code></p>\\n<p>Additionally, an iterator on graphemes can be retrieved using a package called unicode-segmentation with:</p>\\n<p><code>graphemes(my_string, true)</code></p>\\n<p>A given item in the graphemes can then be accessed with by appending a statement like<code>.nth(3)</code></p>\\n<p>All of the helper methods to manipulate String objects are documented\\n<a href=\\\"https://doc.rust-lang.org/std/string/struct.String.html#method.bytes\\\">here</a>.</p>\\n<h2>Structs and Traits</h2>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct RedFox {\\n    enemy: bool,\\n    life: u32,\\n}\\n\\ntrait Noisy {\\n    fn get_noise(&#x26;self) -> &#x26;str;\\n}\\n\\nimpl Noisy for RedFox {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"Meow?\\\" }\\n}\\n\\nfn print_noise&#x3C;T: Noisy>(item: T) {\\n    println!(\\\"\\\", item.get_noise());\\n}\\n\\nimpl Noisy for u8 {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"BYTE!\\\" }\\n}\\n\\nfn main() {\\n    print_noise(5_u8); // prints \\\"BYTE!\\\"\\n}\\n</code></pre>\\n<h2>Vectors</h2>\\n<pre><code class=\\\"language-rust\\\">let mut v: Vec&#x3C;i32> = Vec::new();\\nv.push(2);\\nv.push(4);\\nv.push(6);\\nlet x = v.pop();    // x is 6\\nprintln(\\\"{}\\\", v[1]);// prints \\\"4\\\"\\nlet mut u = vec![2, 4, 6];\\n</code></pre>\\n<h2>Hashmaps</h2>\\n<pre><code class=\\\"language-rust\\\">let mut h: HashMap&#x3C;u8, bool> = HashMap::new();\\nh.insert(5, true);\\nh.insert(6, false);\\nlet have_five = h.remove(&#x26;5).unwrap();\\n</code></pre>\\n<p>Other collections: VecDeque, LinkedList, HashSet, BinaryHeap, BTreeMap, BTreeSet</p>\\n<h2>Enums</h2>\\n<pre><code class=\\\"language-rust\\\">enum Color {\\n    Red,\\n    Green,\\n    Blue,\\n}\\nlet color = Color::Red;\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">enum DispenserItem {\\n    Empty,\\n    Ammo(u8),\\n    Things(String, i32),\\n    Place {x: i32, y: i32},\\n}\\n\\nuse DispenserItem::*;\\nlet item1 = Ammo(69);\\nlet item2 = Things(\\\"hat\\\".to_string(), 7);\\n</code></pre>\\n<h3>The rust predefined Option enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Option&#x3C;T> {\\n    Some(T),\\n    None,\\n}\\n\\nlet mut x: Option&#x3C;i32> =  None;\\nx = Some(5);\\nx.is_some(); // true\\nx.is_none(); false\\nfor i in x {\\n    println!(\\\"{}\\\", i); // prints 5\\n}\\n</code></pre>\\n<h3>The rust predefined Result enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Result&#x3C;T, E> {\\n    Ok(T),\\n    Err(E),\\n}\\n</code></pre>\\n<p>Example with Result:</p>\\n<pre><code class=\\\"language-rust\\\">use std::fs::File;\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.unwrap();\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.expect(\\\"error message\\\");\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.is_ok() {\\n        let f = res.unwrap();\\n    }\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    match res {\\n        Ok(f) => { /* do stuff */ },\\n        Err(e) => { /* do stuff */ },\\n    }\\n}\\n</code></pre>\\n<h3>Ownership, references  &#x26; borrowing</h3>\\n<p>There are 3 rules to ownership:</p>\\n<ol>\\n<li>Each value has an owner</li>\\n<li>There is only one owner of a value</li>\\n<li>Value gets dropped if its owner goes out of scope</li>\\n</ol>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;mut i32\\n*x // a mutable i32\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;i32\\n*x: // an immutable i32\\n</code></pre>\\n<p>At any time, it is possible to have one mutable reference\\nor any number of immutable references to a given value.</p>\\n<p>A borrowed variable passed to a function can be dereferenced in two ways.\\nThe first way is automated deferencing:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    s.insert_str(0, \\\"Hi, \\\");\\n}\\n</code></pre>\\n<p>And the second way is manual:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    *s = String::from(\\\"Replacement\\\")\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"Rust\",\"date\":\"February 06, 2022\",\"path\":\"/rust\",\"tags\":[\"rust\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h3>Miscelaneous bash tips</h3>\\n<p>The following command displays the status code from the last command:</p>\\n<pre><code class=\\\"language-bash\\\">echo $?\\n</code></pre>\\n<p>In the following command, output of a echo command is directed to\\nstandard input so that a second command viz more manages it like a file:</p>\\n<pre><code class=\\\"language-bash\\\">echo 'toto' | more -\\n</code></pre>\\n<h3>tree</h3>\\n<pre><code class=\\\"language-bash\\\">tree --noreport .\\n</code></pre>\\n<h3>vi</h3>\\n<p>Vi command for eliminating all occurences of colon \\\":\\\" is the following:</p>\\n<pre><code>:1,$s/://g\\n</code></pre>\\n<p>Here is the vi command for replacing all occurences of \\\"old\\\" with \\\"new\\\":</p>\\n<pre><code>:1,$s/old/new/g\\n</code></pre>\\n<p>Vi command for searching string \\\"xyz\\\":</p>\\n<pre><code>/xyz\\n</code></pre>\\n<h3>find</h3>\\n<p>File search:</p>\\n<pre><code class=\\\"language-bash\\\">find ./fvsa/ -name \\\"pvsve*\\\"\\n</code></pre>\\n<h3>grep</h3>\\n<p>Search string 'yourDir' in dir yourdir:</p>\\n<pre><code class=\\\"language-bash\\\">grep -nr 'yourString*' yourdir\\n</code></pre>\\n<h3>sed</h3>\\n<p>Sed is a stream editor for filtering and transforming text.</p>\\n<pre><code class=\\\"language-bash\\\">sed -i 's/word1/word2/g' inputfile\\n</code></pre>\\n<p>The <code>-i</code> option requests editing in place.\\n<code>s</code> stands for substitute. <code>g</code> stands for global replacement.</p>\\n<h3>A few tips with watch:</h3>\\n<p>Memory usage:</p>\\n<pre><code class=\\\"language-bash\\\">watch -n 5 free -m\\n</code></pre>\\n<p>Realtime clock in a term:</p>\\n<pre><code class=\\\"language-bash\\\">watch -n 1 date\\n</code></pre>\\n<h3>Modify filenames with rename</h3>\\n<p>Delete 4 first characters in all file names in dir:</p>\\n<pre><code class=\\\"language-bash\\\">rename 's/.{4}(.*)/$1/' *\\n</code></pre>\\n<p>Delete 5 last characters in all file names in dir:</p>\\n<pre><code class=\\\"language-bash\\\">rename 's/(.*).{5}/$1/' *\\n</code></pre>\\n<h3>wc</h3>\\n<p>Display total number of files in 'folder':</p>\\n<pre><code class=\\\"language-bash\\\">ls folder | wc -l\\n</code></pre>\\n<h3>Disk usage</h3>\\n<pre><code class=\\\"language-bash\\\">sudo ncdu -rx /\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">sudo du -shc /*\\n</code></pre>\\n<p>Displaying size occupied by Documents directory:</p>\\n<pre><code class=\\\"language-bash\\\">cd ~\\nsudo du -sh Documents\\n</code></pre>\\n<h3>Managing JDKs on Debian</h3>\\n<pre><code class=\\\"language-bash\\\">update-java-alternatives -l\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">sudo update-java-alternatives -s java-1.8.0-openjdk-amd64\\n</code></pre>\\n<p>Or in a more interactive way:</p>\\n<pre><code class=\\\"language-bash\\\">update-alternatives --config java\\n</code></pre>\\n<h3>Managing screens</h3>\\n<pre><code class=\\\"language-bash\\\">xrandr\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">xrandr --addmode HDMI-1 2560x1080\\n</code></pre>\\n<h3>Serving static content using http-server</h3>\\n<p>The following command starts http-server and serves all of the static\\ncontent (e.g. geojson files) available in the current directory:</p>\\n<pre><code class=\\\"language-bash\\\">http-server --cors='*' -p 5252\\n</code></pre>\\n<h3>Generating random passwords</h3>\\n<p>Install pwgen package and run the following command to\\nget a randow password with 12 characters including one special\\ncharacter at least:</p>\\n<pre><code class=\\\"language-bash\\\">pwgen 12 1 -y\\n</code></pre>\\n<h3>Managing permissions</h3>\\n<p>Command to state that owner and group of directory mydir have full permission\\nto access the directory and its content such as read, write and execute whereas\\nothers will have read and execute permission:</p>\\n<pre><code class=\\\"language-bash\\\">chmod -R 775 mydir\\n</code></pre>\\n<h3>Probing system on service management tool</h3>\\n<p>The following command can be use to check whether the service\\nmanagement tool is <code>service</code> or <code>systemctl</code>:</p>\\n<pre><code class=\\\"language-bash\\\">ps --no-headers -o comm 1\\n</code></pre>\\n<p>A <code>systemd</code> result indicates that systemd (systemctl) is the service management tool, while\\n<code>init</code> indicates that it is System V Init (service).</p>\\n<h3>Managing DNS</h3>\\n<pre><code class=\\\"language-bash\\\">sudo apt install bind9-host\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">host -t NS google.com\\n</code></pre>\",\"id\":\"/home/nicolas/projects/workshop/src/pages/2020-10-11-linux-utils/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-10-11T22:47:32.235Z\",\"path\":\"/linux-utils\",\"title\":\"Linux Utils\",\"excerpt\":\"\",\"tags\":[\"Linux\",\"utils\",\"bash\",\"vi\",\"find\",\"grep\",\"rename\"]}},\"next\":{\"html\":\"<ul>\\n<li><a href=\\\"https://docs.starport.network/guide/\\\">Starport tutorial</a></li>\\n<li><a href=\\\"http://localhost:1317/\\\">swagger view of the high-level blockchain API</a></li>\\n</ul>\\n<p>Execute <code>starport version</code> to find out your installed starport version</p>\\n<pre><code class=\\\"language-bash\\\">starport scaffold chain github.com/cosmonaut/hello\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">starport scaffold --help\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">starport chain serve\\n</code></pre>\",\"id\":\"/home/nicolas/projects/workshop/src/pages/2022-02-18-starport/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-02-18T10:17:00.823Z\",\"path\":\"/starport\",\"title\":\"Starport\",\"excerpt\":\"\",\"tags\":[\"starport\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/rust.json\n// module id = 433\n// module chunks = 101400775151803"],"sourceRoot":""}