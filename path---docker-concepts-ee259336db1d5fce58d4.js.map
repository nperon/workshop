{"version":3,"sources":["webpack:///path---docker-concepts-ee259336db1d5fce58d4.js","webpack:///./.cache/json/docker-concepts.json"],"names":["webpackJsonp","426","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,mvJAA44BC,aAAq6HC,MAAA,kBAAAC,KAAA,eAAAC,KAAA,mBAAAC,MAAA,2CAAAC,QAAA,MAA4IC,aAAgBC,MAAQR,KAAA,GAAAS,GAAA,kIAAAR,aAAgKE,KAAA,2BAAAC,KAAA,UAAAF,MAAA,iBAAAI,QAAA,GAAAD,MAAA,YAA4GK,MAASV,KAAA,ozEAAAS,GAAA,yHAAAR,aAA88EE,KAAA,2BAAAC,KAAA,SAAAF,MAAA,QAAAI,QAAA,GAAAD,MAAA","file":"path---docker-concepts-ee259336db1d5fce58d4.js","sourcesContent":["webpackJsonp([247459877702488],{\n\n/***/ 426:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Basic commands</h2>\\n<pre><code class=\\\"language-bash\\\">docker info\\ndocker\\n</code></pre>\\n<h2>Containers</h2>\\n<pre><code class=\\\"language-bash\\\">docker container run --publish 80:80 --detach --name webhost nginx\\ndocker container logs webhost\\ndocker container stop webhost\\ndocker container top webhost\\ndocker container ls -a\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker container run --detach --publish 3306:3306 --name db --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql\\ndocker container logs db\\ndocker container inspect db\\ndocker container stats db\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker container run -it --name proxy nginx bash\\n</code></pre>\\n<h2>Networks</h2>\\n<pre><code class=\\\"language-bash\\\">docker container run -p 80:80 --name webhost --detach nginx\\ndocker container port webhost\\ndocker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost\\nifconfig\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker network ls\\ndocker network inspect bridge\\ndocker network create my_app_net\\ndocker network inspect my_app_net\\ndocker container run --detach --name new_nginx --network my_app_net nginx\\ndocker network inspect my_app_net\\ndocker network connect my_app_net webhost\\ndocker container inspect webhost\\ndocker network disconnect my_app_net webhost\\ndocker container inspect webhost\\n</code></pre>\\n<h2>DNS</h2>\\n<pre><code class=\\\"language-bash\\\">docker network inspect my_app_net\\ndocker container run --detach --name my_nginx --network my_app_net nginx:alpine\\ndocker network inspect my_app_net\\ndocker container exec -it my_nginx ping new_nginx\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker network create dude\\ndocker container run --detach --network dude --network-alias search elasticsearch:2\\ndocker container run --detach --network dude --network-alias search elasticsearch:2\\ndocker container run --rm --network dude alpine nslookup search\\ndocker container run --rm --network dude centos curl -s search:9200\\ndocker container run --rm --network dude centos curl -s search:9200\\n</code></pre>\\n<h2>Images</h2>\\n<pre><code class=\\\"language-bash\\\">docker history nginx:latest\\ndocker image inspect nginx:latest\\n\\ndocker image tag nginx nperon/nginx\\ndocker login\\ncat ~/.docker/config.json\\ndocker logout\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">cd dockerfile-sample-1/\\n\\ndocker build -t nperon/nodeapp .\\ndocker container run --rm --publish 80:3000 --detach nperon/nodeapp\\ndocker push nperon/nodeapp\\n</code></pre>\\n<h2>Using Prune to Keep Your Docker System Clean</h2>\\n<p>Command to see space usage:</p>\\n<pre><code class=\\\"language-bash\\\">docker system df\\n</code></pre>\\n<p>Command to clean up just dangling images:</p>\\n<pre><code class=\\\"language-bash\\\">docker image prune\\n</code></pre>\\n<p>Command to clean up everything: </p>\\n<pre><code class=\\\"language-bash\\\">docker system prune\\n</code></pre>\\n<p>Command to remove all unused images: </p>\\n<pre><code class=\\\"language-bash\\\">docker image prune -a\\n</code></pre>\\n<p>Command to check the size of each running container: </p>\\n<pre><code class=\\\"language-bash\\\">docker ps --size\\n</code></pre>\\n<p>Command to delete all containers: </p>\\n<pre><code class=\\\"language-bash\\\">docker rm -f $(docker ps -a -q)\\n</code></pre>\\n<p>Command to delete all volumes: </p>\\n<pre><code class=\\\"language-bash\\\">docker volume rm $(docker volume ls -q)\\n</code></pre>\\n<h2>Persistent Data: Data Volumes</h2>\\n<pre><code class=\\\"language-bash\\\">docker container run --detach --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql\\n\\ndocker container run --detach --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker container run --detach --name psql -v psql-data:/var/lib/postgresql/data postgres:9.6.1\\ndocker container logs -f psql\\n</code></pre>\\n<h2>Persistent Data: Bind Mounting</h2>\\n<pre><code class=\\\"language-bash\\\">cd dockerfile-sample-2\\ndocker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">cd bindmount-sample-1\\ndocker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve\\n</code></pre>\\n<h2>docker-compose</h2>\\n<h3>Structure of docker-compose yml</h3>\\n<pre><code class=\\\"language-yml\\\">version: '3.2'  # if no version is specified then v1 is assumed. Recommend v2 minimum\\n\\nservices:  # containers. same as docker run\\n  servicename: # a friendly name. this is also DNS name inside network\\n    image: # Optional if you use build:\\n    command: # Optional, replace the default CMD specified by the image\\n    environment: # Optional, same as -e in docker run\\n    volumes: # Optional, same as -v in docker run\\n  servicename2:\\n\\nvolumes: # Optional, same as docker volume create\\n\\nnetworks: # Optional, same as docker network create\\n</code></pre>\",\"frontmatter\":{\"title\":\"Docker concepts\",\"date\":\"May 16, 2021\",\"path\":\"/docker-concepts\",\"tags\":[\"Docker\",\"containers\",\"networks\",\"images\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-07-15-english-idioms/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-07-15T20:24:43.180Z\",\"path\":\"/idioms\",\"title\":\"English idioms\",\"excerpt\":\"\",\"tags\":[\"idioms\"]}},\"next\":{\"html\":\"<h2>Goals</h2>\\n<pre><code class=\\\"language-zsh\\\">mvn clean\\n</code></pre>\\n<pre><code class=\\\"language-zsh\\\">mvn package\\n</code></pre>\\n<p>To display a POM that includes all of the inherited properties, execute:</p>\\n<pre><code class=\\\"language-zsh\\\">mvn help:effective-pom\\n</code></pre>\\n<h2>Dependency Scope</h2>\\n<ul>\\n<li>Compile: Default. Available on all classpaths of project. Also, propagated to downstream projects.</li>\\n<li>Provided: Like Compile, but expected to be provided by JDK or container at runtime.</li>\\n<li>Runtime: Not required for compile, but needed for runtime. On runtime and test classpaths, not compile.</li>\\n<li>Test: Only available on test classpath, not transitive.</li>\\n<li>System: similar to provided, but jar is added to system explicitly (via file path)</li>\\n<li>Import: imports dependency of POM</li>\\n</ul>\\n<h4>Dependency plugin goals</h4>\\n<ul>\\n<li>dependency:tree</li>\\n<li>dependency:go-offline</li>\\n<li>dependency:purge-local-repository</li>\\n<li>dependency:sources</li>\\n</ul>\\n<h2>Maven Build Lifecycles</h2>\\n<p>Maven is based on the concept of build lifecycles.\\nA licecycle is a pre-defined group of build steps called <strong>phases</strong>.\\nEach phase can be bound to one or more plugin <strong>goals</strong>.\\nAll work done in Maven is done by plugins.\\nLifecycles and phases provide the framework to call plugin goals in a sequence.</p>\\n<p>There are three pre-defined lifecycles:</p>\\n<ul>\\n<li>clean</li>\\n<li>default: does the build and deployment of the project. It is defined without plugin bindings, bindings are defined for each packaging. The default lifecycle include the phases but a number of them are not mentioned: validate, compile, test, package, verify, install and deploy.</li>\\n<li>site: least used in practice</li>\\n</ul>\\n<p>For instance phases of the default lifecycle involved in the case of a jar\\npackaging are the following:</p>\\n<ul>\\n<li>process-resources (maven-resources-plugin: resources)</li>\\n<li>compile (maven-compiler-plugin: compile)</li>\\n<li>process-test-resources (maven-compiler-plugin: testResources)</li>\\n<li>test-compile (maven-compiler-plugin: testCompile)</li>\\n<li>test (maven-surefire-plugin: jar)</li>\\n<li>package (maven-jar-plugin: jar)</li>\\n<li>install (maven-install-plugin: install)</li>\\n<li>deploy (maven-deploy-plugin: deploy)</li>\\n</ul>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-08-27-maven/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-08-27T00:47:00.342Z\",\"path\":\"/maven\",\"title\":\"Maven\",\"excerpt\":\"\",\"tags\":[\"devops\",\"continuous integration\",\"java\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docker-concepts-ee259336db1d5fce58d4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Basic commands</h2>\\n<pre><code class=\\\"language-bash\\\">docker info\\ndocker\\n</code></pre>\\n<h2>Containers</h2>\\n<pre><code class=\\\"language-bash\\\">docker container run --publish 80:80 --detach --name webhost nginx\\ndocker container logs webhost\\ndocker container stop webhost\\ndocker container top webhost\\ndocker container ls -a\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker container run --detach --publish 3306:3306 --name db --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql\\ndocker container logs db\\ndocker container inspect db\\ndocker container stats db\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker container run -it --name proxy nginx bash\\n</code></pre>\\n<h2>Networks</h2>\\n<pre><code class=\\\"language-bash\\\">docker container run -p 80:80 --name webhost --detach nginx\\ndocker container port webhost\\ndocker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost\\nifconfig\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker network ls\\ndocker network inspect bridge\\ndocker network create my_app_net\\ndocker network inspect my_app_net\\ndocker container run --detach --name new_nginx --network my_app_net nginx\\ndocker network inspect my_app_net\\ndocker network connect my_app_net webhost\\ndocker container inspect webhost\\ndocker network disconnect my_app_net webhost\\ndocker container inspect webhost\\n</code></pre>\\n<h2>DNS</h2>\\n<pre><code class=\\\"language-bash\\\">docker network inspect my_app_net\\ndocker container run --detach --name my_nginx --network my_app_net nginx:alpine\\ndocker network inspect my_app_net\\ndocker container exec -it my_nginx ping new_nginx\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker network create dude\\ndocker container run --detach --network dude --network-alias search elasticsearch:2\\ndocker container run --detach --network dude --network-alias search elasticsearch:2\\ndocker container run --rm --network dude alpine nslookup search\\ndocker container run --rm --network dude centos curl -s search:9200\\ndocker container run --rm --network dude centos curl -s search:9200\\n</code></pre>\\n<h2>Images</h2>\\n<pre><code class=\\\"language-bash\\\">docker history nginx:latest\\ndocker image inspect nginx:latest\\n\\ndocker image tag nginx nperon/nginx\\ndocker login\\ncat ~/.docker/config.json\\ndocker logout\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">cd dockerfile-sample-1/\\n\\ndocker build -t nperon/nodeapp .\\ndocker container run --rm --publish 80:3000 --detach nperon/nodeapp\\ndocker push nperon/nodeapp\\n</code></pre>\\n<h2>Using Prune to Keep Your Docker System Clean</h2>\\n<p>Command to see space usage:</p>\\n<pre><code class=\\\"language-bash\\\">docker system df\\n</code></pre>\\n<p>Command to clean up just dangling images:</p>\\n<pre><code class=\\\"language-bash\\\">docker image prune\\n</code></pre>\\n<p>Command to clean up everything: </p>\\n<pre><code class=\\\"language-bash\\\">docker system prune\\n</code></pre>\\n<p>Command to remove all unused images: </p>\\n<pre><code class=\\\"language-bash\\\">docker image prune -a\\n</code></pre>\\n<p>Command to check the size of each running container: </p>\\n<pre><code class=\\\"language-bash\\\">docker ps --size\\n</code></pre>\\n<p>Command to delete all containers: </p>\\n<pre><code class=\\\"language-bash\\\">docker rm -f $(docker ps -a -q)\\n</code></pre>\\n<p>Command to delete all volumes: </p>\\n<pre><code class=\\\"language-bash\\\">docker volume rm $(docker volume ls -q)\\n</code></pre>\\n<h2>Persistent Data: Data Volumes</h2>\\n<pre><code class=\\\"language-bash\\\">docker container run --detach --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql\\n\\ndocker container run --detach --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">docker container run --detach --name psql -v psql-data:/var/lib/postgresql/data postgres:9.6.1\\ndocker container logs -f psql\\n</code></pre>\\n<h2>Persistent Data: Bind Mounting</h2>\\n<pre><code class=\\\"language-bash\\\">cd dockerfile-sample-2\\ndocker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">cd bindmount-sample-1\\ndocker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve\\n</code></pre>\\n<h2>docker-compose</h2>\\n<h3>Structure of docker-compose yml</h3>\\n<pre><code class=\\\"language-yml\\\">version: '3.2'  # if no version is specified then v1 is assumed. Recommend v2 minimum\\n\\nservices:  # containers. same as docker run\\n  servicename: # a friendly name. this is also DNS name inside network\\n    image: # Optional if you use build:\\n    command: # Optional, replace the default CMD specified by the image\\n    environment: # Optional, same as -e in docker run\\n    volumes: # Optional, same as -v in docker run\\n  servicename2:\\n\\nvolumes: # Optional, same as docker volume create\\n\\nnetworks: # Optional, same as docker network create\\n</code></pre>\",\"frontmatter\":{\"title\":\"Docker concepts\",\"date\":\"May 16, 2021\",\"path\":\"/docker-concepts\",\"tags\":[\"Docker\",\"containers\",\"networks\",\"images\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-07-15-english-idioms/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-07-15T20:24:43.180Z\",\"path\":\"/idioms\",\"title\":\"English idioms\",\"excerpt\":\"\",\"tags\":[\"idioms\"]}},\"next\":{\"html\":\"<h2>Goals</h2>\\n<pre><code class=\\\"language-zsh\\\">mvn clean\\n</code></pre>\\n<pre><code class=\\\"language-zsh\\\">mvn package\\n</code></pre>\\n<p>To display a POM that includes all of the inherited properties, execute:</p>\\n<pre><code class=\\\"language-zsh\\\">mvn help:effective-pom\\n</code></pre>\\n<h2>Dependency Scope</h2>\\n<ul>\\n<li>Compile: Default. Available on all classpaths of project. Also, propagated to downstream projects.</li>\\n<li>Provided: Like Compile, but expected to be provided by JDK or container at runtime.</li>\\n<li>Runtime: Not required for compile, but needed for runtime. On runtime and test classpaths, not compile.</li>\\n<li>Test: Only available on test classpath, not transitive.</li>\\n<li>System: similar to provided, but jar is added to system explicitly (via file path)</li>\\n<li>Import: imports dependency of POM</li>\\n</ul>\\n<h4>Dependency plugin goals</h4>\\n<ul>\\n<li>dependency:tree</li>\\n<li>dependency:go-offline</li>\\n<li>dependency:purge-local-repository</li>\\n<li>dependency:sources</li>\\n</ul>\\n<h2>Maven Build Lifecycles</h2>\\n<p>Maven is based on the concept of build lifecycles.\\nA licecycle is a pre-defined group of build steps called <strong>phases</strong>.\\nEach phase can be bound to one or more plugin <strong>goals</strong>.\\nAll work done in Maven is done by plugins.\\nLifecycles and phases provide the framework to call plugin goals in a sequence.</p>\\n<p>There are three pre-defined lifecycles:</p>\\n<ul>\\n<li>clean</li>\\n<li>default: does the build and deployment of the project. It is defined without plugin bindings, bindings are defined for each packaging. The default lifecycle include the phases but a number of them are not mentioned: validate, compile, test, package, verify, install and deploy.</li>\\n<li>site: least used in practice</li>\\n</ul>\\n<p>For instance phases of the default lifecycle involved in the case of a jar\\npackaging are the following:</p>\\n<ul>\\n<li>process-resources (maven-resources-plugin: resources)</li>\\n<li>compile (maven-compiler-plugin: compile)</li>\\n<li>process-test-resources (maven-compiler-plugin: testResources)</li>\\n<li>test-compile (maven-compiler-plugin: testCompile)</li>\\n<li>test (maven-surefire-plugin: jar)</li>\\n<li>package (maven-jar-plugin: jar)</li>\\n<li>install (maven-install-plugin: install)</li>\\n<li>deploy (maven-deploy-plugin: deploy)</li>\\n</ul>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-08-27-maven/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-08-27T00:47:00.342Z\",\"path\":\"/maven\",\"title\":\"Maven\",\"excerpt\":\"\",\"tags\":[\"devops\",\"continuous integration\",\"java\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docker-concepts.json\n// module id = 426\n// module chunks = 247459877702488"],"sourceRoot":""}