{"version":3,"sources":["webpack:///path---tags-java-c30717c41ebb7d69f8dc.js","webpack:///./.cache/json/tags-java.json"],"names":["webpackJsonp","481","module","exports","pathContext","posts","html","id","frontmatter","date","path","title","excerpt","tags","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,KAAA,ozEAAAC,GAAA,yHAAAC,aAA88EC,KAAA,2BAAAC,KAAA,SAAAC,MAAA,QAAAC,QAAA,GAAAC,MAAA,6CAAoIP,KAAA,oDAAAC,GAAA,mIAAAC,aAAkNC,KAAA,2BAAAC,KAAA,mBAAAC,MAAA,kBAAAC,QAAA,GAAAC,MAAA,6BAAsIC,QAAA","file":"path---tags-java-c30717c41ebb7d69f8dc.js","sourcesContent":["webpackJsonp([155380214527963],{\n\n/***/ 481:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<h2>Goals</h2>\\n<pre><code class=\\\"language-zsh\\\">mvn clean\\n</code></pre>\\n<pre><code class=\\\"language-zsh\\\">mvn package\\n</code></pre>\\n<p>To display a POM that includes all of the inherited properties, execute:</p>\\n<pre><code class=\\\"language-zsh\\\">mvn help:effective-pom\\n</code></pre>\\n<h2>Dependency Scope</h2>\\n<ul>\\n<li>Compile: Default. Available on all classpaths of project. Also, propagated to downstream projects.</li>\\n<li>Provided: Like Compile, but expected to be provided by JDK or container at runtime.</li>\\n<li>Runtime: Not required for compile, but needed for runtime. On runtime and test classpaths, not compile.</li>\\n<li>Test: Only available on test classpath, not transitive.</li>\\n<li>System: similar to provided, but jar is added to system explicitly (via file path)</li>\\n<li>Import: imports dependency of POM</li>\\n</ul>\\n<h4>Dependency plugin goals</h4>\\n<ul>\\n<li>dependency:tree</li>\\n<li>dependency:go-offline</li>\\n<li>dependency:purge-local-repository</li>\\n<li>dependency:sources</li>\\n</ul>\\n<h2>Maven Build Lifecycles</h2>\\n<p>Maven is based on the concept of build lifecycles.\\nA licecycle is a pre-defined group of build steps called <strong>phases</strong>.\\nEach phase can be bound to one or more plugin <strong>goals</strong>.\\nAll work done in Maven is done by plugins.\\nLifecycles and phases provide the framework to call plugin goals in a sequence.</p>\\n<p>There are three pre-defined lifecycles:</p>\\n<ul>\\n<li>clean</li>\\n<li>default: does the build and deployment of the project. It is defined without plugin bindings, bindings are defined for each packaging. The default lifecycle include the phases but a number of them are not mentioned: validate, compile, test, package, verify, install and deploy.</li>\\n<li>site: least used in practice</li>\\n</ul>\\n<p>For instance phases of the default lifecycle involved in the case of a jar\\npackaging are the following:</p>\\n<ul>\\n<li>process-resources (maven-resources-plugin: resources)</li>\\n<li>compile (maven-compiler-plugin: compile)</li>\\n<li>process-test-resources (maven-compiler-plugin: testResources)</li>\\n<li>test-compile (maven-compiler-plugin: testCompile)</li>\\n<li>test (maven-surefire-plugin: jar)</li>\\n<li>package (maven-jar-plugin: jar)</li>\\n<li>install (maven-install-plugin: install)</li>\\n<li>deploy (maven-deploy-plugin: deploy)</li>\\n</ul>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-08-27-maven/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-08-27T00:47:00.342Z\",\"path\":\"/maven\",\"title\":\"Maven\",\"excerpt\":\"\",\"tags\":[\"devops\",\"continuous integration\",\"java\"]}},{\"html\":\"<h2>Links</h2>\\n<h2>Project Reactor concepts</h2>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2021-10-20-project-reactor/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2021-10-20T10:17:00.823Z\",\"path\":\"/project-reactor\",\"title\":\"Project Reactor\",\"excerpt\":\"\",\"tags\":[\"java\",\"project reactor\"]}}],\"tagName\":\"java\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-java-c30717c41ebb7d69f8dc.js","module.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<h2>Goals</h2>\\n<pre><code class=\\\"language-zsh\\\">mvn clean\\n</code></pre>\\n<pre><code class=\\\"language-zsh\\\">mvn package\\n</code></pre>\\n<p>To display a POM that includes all of the inherited properties, execute:</p>\\n<pre><code class=\\\"language-zsh\\\">mvn help:effective-pom\\n</code></pre>\\n<h2>Dependency Scope</h2>\\n<ul>\\n<li>Compile: Default. Available on all classpaths of project. Also, propagated to downstream projects.</li>\\n<li>Provided: Like Compile, but expected to be provided by JDK or container at runtime.</li>\\n<li>Runtime: Not required for compile, but needed for runtime. On runtime and test classpaths, not compile.</li>\\n<li>Test: Only available on test classpath, not transitive.</li>\\n<li>System: similar to provided, but jar is added to system explicitly (via file path)</li>\\n<li>Import: imports dependency of POM</li>\\n</ul>\\n<h4>Dependency plugin goals</h4>\\n<ul>\\n<li>dependency:tree</li>\\n<li>dependency:go-offline</li>\\n<li>dependency:purge-local-repository</li>\\n<li>dependency:sources</li>\\n</ul>\\n<h2>Maven Build Lifecycles</h2>\\n<p>Maven is based on the concept of build lifecycles.\\nA licecycle is a pre-defined group of build steps called <strong>phases</strong>.\\nEach phase can be bound to one or more plugin <strong>goals</strong>.\\nAll work done in Maven is done by plugins.\\nLifecycles and phases provide the framework to call plugin goals in a sequence.</p>\\n<p>There are three pre-defined lifecycles:</p>\\n<ul>\\n<li>clean</li>\\n<li>default: does the build and deployment of the project. It is defined without plugin bindings, bindings are defined for each packaging. The default lifecycle include the phases but a number of them are not mentioned: validate, compile, test, package, verify, install and deploy.</li>\\n<li>site: least used in practice</li>\\n</ul>\\n<p>For instance phases of the default lifecycle involved in the case of a jar\\npackaging are the following:</p>\\n<ul>\\n<li>process-resources (maven-resources-plugin: resources)</li>\\n<li>compile (maven-compiler-plugin: compile)</li>\\n<li>process-test-resources (maven-compiler-plugin: testResources)</li>\\n<li>test-compile (maven-compiler-plugin: testCompile)</li>\\n<li>test (maven-surefire-plugin: jar)</li>\\n<li>package (maven-jar-plugin: jar)</li>\\n<li>install (maven-install-plugin: install)</li>\\n<li>deploy (maven-deploy-plugin: deploy)</li>\\n</ul>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-08-27-maven/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-08-27T00:47:00.342Z\",\"path\":\"/maven\",\"title\":\"Maven\",\"excerpt\":\"\",\"tags\":[\"devops\",\"continuous integration\",\"java\"]}},{\"html\":\"<h2>Links</h2>\\n<h2>Project Reactor concepts</h2>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2021-10-20-project-reactor/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2021-10-20T10:17:00.823Z\",\"path\":\"/project-reactor\",\"title\":\"Project Reactor\",\"excerpt\":\"\",\"tags\":[\"java\",\"project reactor\"]}}],\"tagName\":\"java\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-java.json\n// module id = 481\n// module chunks = 155380214527963"],"sourceRoot":""}