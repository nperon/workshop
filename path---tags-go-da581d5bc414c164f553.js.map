{"version":3,"sources":["webpack:///path---tags-go-da581d5bc414c164f553.js","webpack:///./.cache/json/tags-go.json"],"names":["webpackJsonp","453","module","exports","pathContext","posts","html","id","frontmatter","date","path","title","excerpt","tags","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,KAAA,g7EAAqvEC,GAAA,sGAAAC,aAAwXC,KAAA,2BAAAC,KAAA,MAAAC,MAAA,KAAAC,QAAA,KAAAC,MAAA,SAA0FC,QAAA","file":"path---tags-go-da581d5bc414c164f553.js","sourcesContent":["webpackJsonp([29981209658063],{\n\n/***/ 453:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<h2>Formatted printing</h2>\\n<pre><code class=\\\"language-go\\\">fmt.Printf(\\\"%v\\\\n\\\", 8)\\n</code></pre>\\n<h2>Structures</h2>\\n<pre><code class=\\\"language-go\\\">package main\\n\\nimport \\\"fmt\\\"\\n\\ntype Passenger struct {\\n    Name         string\\n    TicketNumber int\\n    Boarded      bool\\n}\\n\\ntype Bus struct {\\n    FrontSeat Passenger\\n}\\n\\nfunc main() {\\n    var (\\n        bill = Passenger{Name: \\\"Bill\\\", TicketNumber: 2}\\n        ella = Passenger{Name: \\\"Ella\\\", TicketNumber: 3}\\n    )\\n    fmt.Println(bill, ella)\\n    var heidi Passenger\\n    heidi.Name = \\\"Heidi\\\"\\n    heidi.TicketNumber = 4\\n    fmt.Println(heidi)\\n    var vehicle = Bus{FrontSeat: ella}\\n    fmt.Println(vehicle)\\n}\\n</code></pre>\\n<h2>Arrays</h2>\\n<pre><code class=\\\"language-go\\\">Go arrays have fixed size. \\n</code></pre>\\n<h2>Slices</h2>\\n<p>Slices are companion types that work with arrays.\\nThey enable a \\\"view\\\" into an array.\\nViews are dynamic and not fixed in size.\\nFunctions can accept a clice as a function parameter.\\nAny array can be operated upon via slice.</p>\\n<pre><code class=\\\"language-go\\\">mySlice := []int{1, 2, 3}\\nitem1 := mySlice[0]\\n</code></pre>\\n<pre><code class=\\\"language-go\\\">numbers := [...]int{1, 2, 3, 4}\\nslice1 := numbers[:]\\nslice2 := numbers[1:]\\nslice3 := numbers[:1]\\nslice4 := numbers[:2]\\nslice5 := numbers[1:3]\\n</code></pre>\\n<p>The <code>append()</code> function can add additional elements:</p>\\n<pre><code class=\\\"language-go\\\">numbers := [...]int{1, 2, 3, 4}\\nnumbers = append(numbers, 4, 5, 6)\\n</code></pre>\\n<p>3 dots can be used to extend a slice with another slice:</p>\\n<pre><code class=\\\"language-go\\\">part1 := []int{1, 2, 3}\\npart2 := []int{4, 5, 6}\\ncombined := append(part1, part2...)\\n</code></pre>\\n<p>Slices can be preallocated with specific capacities using the make function:</p>\\n<pre><code class=\\\"language-go\\\">slice := make([]int, 10)\\n</code></pre>\\n<p>This saves computation time.</p>\\n<p>The len() function returns the length of any slice;</p>\\n<pre><code class=\\\"language-go\\\">for i:=0; i &#x3C; len(slice); i++ {\\n    // ...\\n}\\n</code></pre>\\n<p>Slices can be multidimensional:</p>\\n<pre><code class=\\\"language-go\\\">board := [][] string {\\n    []string{\\\"_\\\", \\\"_\\\", \\\"_\\\"},\\n    {\\\"_\\\", \\\"_\\\", \\\"_\\\"},\\n    {\\\"_\\\", \\\"_\\\", \\\"_\\\"},\\n}\\nboard[0][0] = \\\"X\\\"\\nboard[0][0] = \\\"O\\\"\\n</code></pre>\\n<h2>Ranges</h2>\\n<pre><code class=\\\"language-go\\\"></code></pre>\\n<h2>Maps</h2>\\n<pre><code class=\\\"language-go\\\"></code></pre>\\n<h2>Pointers</h2>\\n<pre><code class=\\\"language-go\\\"></code></pre>\",\"id\":\"/home/nicolas/projects/workshop/src/pages/2022-06-14-go/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-06-14T14:24:43.180Z\",\"path\":\"/go\",\"title\":\"Go\",\"excerpt\":\"Go\",\"tags\":[\"go\"]}}],\"tagName\":\"go\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-go-da581d5bc414c164f553.js","module.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<h2>Formatted printing</h2>\\n<pre><code class=\\\"language-go\\\">fmt.Printf(\\\"%v\\\\n\\\", 8)\\n</code></pre>\\n<h2>Structures</h2>\\n<pre><code class=\\\"language-go\\\">package main\\n\\nimport \\\"fmt\\\"\\n\\ntype Passenger struct {\\n    Name         string\\n    TicketNumber int\\n    Boarded      bool\\n}\\n\\ntype Bus struct {\\n    FrontSeat Passenger\\n}\\n\\nfunc main() {\\n    var (\\n        bill = Passenger{Name: \\\"Bill\\\", TicketNumber: 2}\\n        ella = Passenger{Name: \\\"Ella\\\", TicketNumber: 3}\\n    )\\n    fmt.Println(bill, ella)\\n    var heidi Passenger\\n    heidi.Name = \\\"Heidi\\\"\\n    heidi.TicketNumber = 4\\n    fmt.Println(heidi)\\n    var vehicle = Bus{FrontSeat: ella}\\n    fmt.Println(vehicle)\\n}\\n</code></pre>\\n<h2>Arrays</h2>\\n<pre><code class=\\\"language-go\\\">Go arrays have fixed size. \\n</code></pre>\\n<h2>Slices</h2>\\n<p>Slices are companion types that work with arrays.\\nThey enable a \\\"view\\\" into an array.\\nViews are dynamic and not fixed in size.\\nFunctions can accept a clice as a function parameter.\\nAny array can be operated upon via slice.</p>\\n<pre><code class=\\\"language-go\\\">mySlice := []int{1, 2, 3}\\nitem1 := mySlice[0]\\n</code></pre>\\n<pre><code class=\\\"language-go\\\">numbers := [...]int{1, 2, 3, 4}\\nslice1 := numbers[:]\\nslice2 := numbers[1:]\\nslice3 := numbers[:1]\\nslice4 := numbers[:2]\\nslice5 := numbers[1:3]\\n</code></pre>\\n<p>The <code>append()</code> function can add additional elements:</p>\\n<pre><code class=\\\"language-go\\\">numbers := [...]int{1, 2, 3, 4}\\nnumbers = append(numbers, 4, 5, 6)\\n</code></pre>\\n<p>3 dots can be used to extend a slice with another slice:</p>\\n<pre><code class=\\\"language-go\\\">part1 := []int{1, 2, 3}\\npart2 := []int{4, 5, 6}\\ncombined := append(part1, part2...)\\n</code></pre>\\n<p>Slices can be preallocated with specific capacities using the make function:</p>\\n<pre><code class=\\\"language-go\\\">slice := make([]int, 10)\\n</code></pre>\\n<p>This saves computation time.</p>\\n<p>The len() function returns the length of any slice;</p>\\n<pre><code class=\\\"language-go\\\">for i:=0; i &#x3C; len(slice); i++ {\\n    // ...\\n}\\n</code></pre>\\n<p>Slices can be multidimensional:</p>\\n<pre><code class=\\\"language-go\\\">board := [][] string {\\n    []string{\\\"_\\\", \\\"_\\\", \\\"_\\\"},\\n    {\\\"_\\\", \\\"_\\\", \\\"_\\\"},\\n    {\\\"_\\\", \\\"_\\\", \\\"_\\\"},\\n}\\nboard[0][0] = \\\"X\\\"\\nboard[0][0] = \\\"O\\\"\\n</code></pre>\\n<h2>Ranges</h2>\\n<pre><code class=\\\"language-go\\\"></code></pre>\\n<h2>Maps</h2>\\n<pre><code class=\\\"language-go\\\"></code></pre>\\n<h2>Pointers</h2>\\n<pre><code class=\\\"language-go\\\"></code></pre>\",\"id\":\"/home/nicolas/projects/workshop/src/pages/2022-06-14-go/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-06-14T14:24:43.180Z\",\"path\":\"/go\",\"title\":\"Go\",\"excerpt\":\"Go\",\"tags\":[\"go\"]}}],\"tagName\":\"go\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-go.json\n// module id = 453\n// module chunks = 29981209658063"],"sourceRoot":""}