{"version":3,"sources":["webpack:///path---kubernetes-03f6a4fbbad292e85d2f.js","webpack:///./.cache/json/kubernetes.json"],"names":["webpackJsonp","451","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,2tTAA44FC,aAAq8NC,MAAA,aAAAC,KAAA,oBAAAC,KAAA,cAAAC,MAAA,+BAAAC,QAAA,MAA2HC,aAAgBC,MAAQR,KAAA,i7mBAAgmqBS,GAAA,yHAAAR,aAA4KE,KAAA,2BAAAC,KAAA,SAAAF,MAAA,QAAAI,QAAA,GAAAD,MAAA,mBAAyGK,MAASV,KAAA;AAAg5tBS,GAAA,wHAAAR,aAA2xBE,KAAA,2BAAAC,KAAA,QAAAF,MAAA,OAAAI,QAAA,GAAAD,MAAA","file":"path---kubernetes-03f6a4fbbad292e85d2f.js","sourcesContent":["webpackJsonp([54858438791056],{\n\n/***/ 451:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Terminology</h2>\\n<ul>\\n<li>kubernetes / k8s / kube: the whole orchestration system</li>\\n<li>kubeclt aka cube control: cli to configure kubernetes and manage apps</li>\\n<li>node: single server in the k8s cluster</li>\\n<li>kubelet: k8s agent running on nodes</li>\\n<li>each kubelet can have a kube-proxy controlling its networking</li>\\n<li>control plane aka the \\\"master\\\": set of containers that manage the cluster. Includes api server, scheduler, controller manager, etcd, core DNS and more</li>\\n</ul>\\n<p>A possible local Kubernetes environment could be composed of the following applications: </p>\\n<ul>\\n<li>minikube: a local cluster which can be installed and run on your machine. </li>\\n<li>kubectl: the interface to interact with the cluster</li>\\n<li>k9s: a CLI to monitor and manage your local kubernetes clusters</li>\\n</ul>\\n<!-- ## Links\\n\\nKubernetes in a browser:  \\n\\ntry [http://play-with-k8s.com](http://play-with-k8s.com)\\nor [katacoda.com](katacoda.com) in browser -->\\n<h1>Local install</h1>\\n<p>Follow documentation on <a href=\\\"https://minikube.sigs.k8s.io/docs/start/\\\">this page</a> to install minikube locally.</p>\\n<p>You can then check your minikube status with: </p>\\n<pre><code class=\\\"language-bash\\\">minikube status\\n</code></pre>\\n<p>It can be started if necessary with</p>\\n<pre><code class=\\\"language-bash\\\">minikube start\\n</code></pre>\\n<p>Install now kubectl following documentation on <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/\\\">this page</a>. </p>\\n<p>The <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#optional-kubectl-configurations-and-plugins\\\">Optional kubectl configurations and plugins</a> can be skipped in a first stage.</p>\\n<p>Configuration can be verified with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl cluster-info\\n</code></pre>\\n<p>You can find out the location of your kubectl executable with:</p>\\n<pre><code class=\\\"language-bash\\\">which kubectl\\n</code></pre>\\n<p>Download the <code>k9s_Linux_x86_64.tar.gz</code> archive available on\\n<a href=\\\"https://github.com/derailed/k9s/releases\\\">this page</a> from the k9s github.\\nOnce it is extracted, just execute k9s with:</p>\\n<pre><code class=\\\"language-bash\\\">./k9s\\n</code></pre>\\n<h2>Pod commands together with a proper example to apply them:</h2>\\n<p><code>kubectl get pod</code><br>\\nget information about all running pods  </p>\\n<p><code>kubectl describe pod &#x3C;pod></code><br>\\ndescribe one pod  </p>\\n<p><code>kubectl expose pod &#x3C;pod> --port=444 --name=frontend</code><br>\\nexpose the port of a pod (creates a new service)  </p>\\n<p><code>kubectl port-forward &#x3C;pod> 8080</code><br>\\nport forward the exposed pod port to your local machine  </p>\\n<p><code>kubectl attach &#x3C;podname> -i</code><br>\\nattach to the pod  </p>\\n<p><code>kubectl exec &#x3C;pod> -- command</code><br>\\nexecute a command on the pod  </p>\\n<p><code>kubectl label pods &#x3C;pod> mylabel=awesome</code><br>\\nadd a new label to a pod  </p>\\n<p><code>kubectl run -i --tty busybox --image=busybox --restart=Never -- sh</code><br>\\nrun a shell in a pod  </p>\\n<p>With the following example of a pod description\\nin a file called <code>helloworld.yml</code>,</p>\\n<pre><code class=\\\"language-yaml\\\">apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nodehelloworld.example.com\\n  labels:\\n    app: helloworld\\nspec:\\n  containers:\\n  - name: k8s-demo\\n    image: wardviaene/k8s-demo\\n    ports:\\n    - name: nodejs-port\\n      containerPort: 3000\\n</code></pre>\\n<p>The pod can be created with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl create -f helloworld.yml\\n</code></pre>\\n<p>Then, local port 8081 can be forwarded to port 3000 of the pod with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl port-forward nodehelloworld.example.com 8081:3000\\n</code></pre>\\n<p>Or else we can create a service of type NodePort to expose the pod with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehelloworld-service\\n</code></pre>\\n<p>The end point to that service from the local machine can be displayed with:</p>\\n<pre><code class=\\\"language-bash\\\">minikube service nodehelloworld-service --url\\n</code></pre>\\n<p>IP addresses of services within the cluster are different. They can be accessed with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get service\\n</code></pre>\\n<p>It is possible to attach to the pod and watch the possible logs with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl attach nodehelloworld.example.com\\n</code></pre>\\n<p>To execute a command like <code>ls /app</code> run the following line:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl exec nodehelloworld.example.com -- ls /app\\n</code></pre>\\n<p>It is instructive to run the two following commands now:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl exec nodehelloworld.example.com -- touch /app/test.txt\\nkubectl exec nodehelloworld.example.com -- ls /app\\n</code></pre>\\n<p>To operate with a bash prompt in a pod use the following command: </p>\\n<pre><code class=\\\"language-bash\\\">kubectl exec nodehelloworld.example.com -i -t -- /bin/bash\\n</code></pre>\\n<p>A description of the pod can be displayed with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl describe service nodehelloworld-service\\n</code></pre>\\n<p>Launch another pod based on the busybox image with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl run -i --tty busybox --image=busybox --restart=Never -- sh\\n</code></pre>\\n<p>Let us assume that the endpoint of our nodehelloworld-service displayed in its description was 172.17.0.2:3000. Then, commands can be executed in the shell of our busybox like:</p>\\n<pre><code class=\\\"language-bash\\\">ls\\ntelnet 172.17.0.2 3000\\n</code></pre>\\n<p>Pods can finally be deleted with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete pod busybox\\nkubectl delete pod nodehelloworld.example.com\\n</code></pre>\\n<p>You can also delete the service nodehelloworld-service with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete service nodehelloworld-service\\n</code></pre>\\n<h2>Starting a cluster with an nginx container</h2>\\n<p>Create a file called <code>deployment.yaml</code> with the following content:</p>\\n<pre><code class=\\\"language-yaml\\\">apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: nginx-deployment\\n  labels:\\n    app: nginx\\nspec:\\n  selector:\\n    matchLabels:\\n      app: nginx\\n  template:\\n    metadata:\\n      labels:\\n        app: nginx\\n    spec:\\n      containers:\\n      - name: nginx\\n        image: nginx:1.21.4\\n        ports:\\n        - containerPort: 80\\n</code></pre>\\n<p>Create another file called <code>service.yaml</code> with the following content:</p>\\n<pre><code class=\\\"language-yaml\\\">apiVersion: v1\\nkind: Service\\nmetadata:\\n  name: nginx-service\\n  labels:\\n    app: nginx\\nspec:\\n  selector:\\n    app: nginx\\n  ports:\\n    - protocol: TCP\\n      port: 80\\n      targetPort: 80\\n  type: LoadBalancer\\n</code></pre>\\n<p>Cluster can now be started with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -f deployment.yaml\\n</code></pre>\\n<p>followed with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -f service.yaml\\n</code></pre>\\n<p>To display services execute:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get services\\n</code></pre>\\n<p>The following command is an interesting one to run now:</p>\\n<pre><code class=\\\"language-bash\\\">minikube service nginx-service\\n</code></pre>\\n<p>since it displays the url of the nginx-service and opens the latter\\nservice in your default browser.</p>\\n<p>To display namespaces execute:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get namespaces\\n</code></pre>\\n<p>To find out the namespace where pods have been created you can run this command:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get pods --all-namespaces\\n</code></pre>\\n<p>To stop one of the pods displayed whose name is for instance <code>hello-minikube-6ddfcc9757-h4ctx</code>\\nexecute the following command:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete -n default pod hello-minikube-6ddfcc9757-h4ctx\\n</code></pre>\\n<p>To display deployments currently running execute:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get deployments\\n</code></pre>\\n<p>To delete a service first display all of your services with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get service -o wide\\n</code></pre>\\n<p>You can now pick the one you wish to delete from the displayed list\\n--- for instance nginx-service --- and then delete it with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete service nginx-service\\n</code></pre>\\n<p>Delete deployment nginx-deployment with:</p>\\n<pre><code class=\\\"language-bash\\\">delete deployment nginx-deployment\\n</code></pre>\\n<h2>Minikube example</h2>\\n<pre><code class=\\\"language-bash\\\">kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">kubectl expose deployment hello-minikube --type=NodePort --port=8080\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">minikube service hello-minikube\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">kubectl delete deployment hello-minikube\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">minikube stop\\n</code></pre>\\n<p>The minikube vm can optionally be completely reset with:</p>\\n<pre><code class=\\\"language-bash\\\">minikube delete\\n</code></pre>\\n<p>After this, Minikube will start from scratch the next time it is started.</p>\\n<h2>Advanced topics</h2>\\n<h4>Service discovery</h4>\\n<pre><code class=\\\"language-zsh\\\">kubectl run -i --tty busybox --image=busybox --restart=Never -- sh\\n</code></pre>\\n<pre><code class=\\\"language-sh\\\">cat /etc/resolv.conf\\n</code></pre>\\n<pre><code class=\\\"language-zsh\\\">kubectl exec database -i -t -- mysql -u root -p\\n</code></pre>\\n<h4>ConfigMap</h4>\\n<pre><code class=\\\"language-sh\\\">kubectl create configmap app-config --fromfile=app.properties\\n</code></pre>\\n<h4>Ingress Controller</h4>\\n<h4>External DNS</h4>\\n<h4>Volumes</h4>\",\"frontmatter\":{\"title\":\"Kubernetes\",\"date\":\"November 25, 2021\",\"path\":\"/kubernetes\",\"tags\":[\"kubernetes\",\"cloud\",\"devops\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>Links</h2>\\n<ul>\\n<li><a href=\\\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\\\">installing and starting mongodb locally</a></li>\\n<li><a href=\\\"https://linuxize.com/post/how-to-install-mongodb-on-ubuntu-18-04/\\\">some tips on configuration</a></li>\\n</ul>\\n<h2>Starting server and shell</h2>\\n<p>Start mongodb server with:</p>\\n<pre><code class=\\\"language-bash\\\">sudo service mongod start\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">sudo service mongod status\\n</code></pre>\\n<p>To verify whether the installation has completed successfully, connect to the MongoDB database server using the mongo tool and print the connection status with:</p>\\n<pre><code class=\\\"language-bash\\\">mongo --eval 'db.runCommand({ connectionStatus: 1 })'\\n</code></pre>\\n<p>Shell can now be started with:</p>\\n<pre><code class=\\\"language-bash\\\">mongo\\n</code></pre>\\n<h2>Example</h2>\\n<pre><code class=\\\"language-node\\\">db.createCollection('employes');\\n</code></pre>\\n<ul>\\n<li>display all of the collections in the database:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">show collections;\\n</code></pre>\\n<ul>\\n<li>insert data:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7d9\\\"), \\\"nom\\\" : \\\"King\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 27, \\\"adresse\\\" : { \\\"numero\\\" : 78, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7da\\\"), \\\"nom\\\" : \\\"Ossola\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 75, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7db\\\"), \\\"nom\\\" : \\\"Monnin\\\", \\\"prenom\\\" : \\\"Gilles\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 80, \\\"rue\\\" : \\\"General Leclerc\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dc\\\"), \\\"nom\\\" : \\\"Priou\\\", \\\"prenom\\\" : \\\"Franck\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 547608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dd\\\"), \\\"nom\\\" : \\\"Leberre\\\", \\\"prenom\\\" : \\\"Stephanie\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 559608352, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7de\\\"), \\\"nom\\\" : \\\"Rupont\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 11, \\\"adresse\\\" : { \\\"numero\\\" : 15, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7df\\\"), \\\"nom\\\" : \\\"Ving\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 17, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7e0\\\"), \\\"nom\\\" : \\\"Bass\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e1\\\"), \\\"nom\\\" : \\\"Motin\\\", \\\"prenom\\\" : \\\"Roger\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 67, \\\"rue\\\" : \\\"Jean Moulin\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e2\\\"), \\\"nom\\\" : \\\"Prito\\\", \\\"prenom\\\" : \\\"Arnaud\\\", \\\"anciennete\\\" : 6, \\\"adresse\\\" : { \\\"numero\\\" : 62, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 565608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e3\\\"), \\\"nom\\\" : \\\"Fererre\\\", \\\"prenom\\\" : \\\"Julien\\\", \\\"anciennete\\\" : 8, \\\"adresse\\\" : { \\\"numero\\\" : 24, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 577608352, \\\"prime\\\" : 4500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e4\\\"), \\\"nom\\\" : \\\"Cuponi\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e5\\\"), \\\"nom\\\" : \\\"Kingaba\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 23, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 33000, \\\"ville\\\"); db.employes.save(: \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e6\\\"), \\\"nom\\\" : \\\"Sola\\\", \\\"prenom\\\" : \\\"Nicolas\\\", \\\"anciennete\\\" : 3, \\\"adresse\\\" : { \\\"numero\\\" : 45, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e7\\\"), \\\"nom\\\" : \\\"Mani\\\", \\\"prenom\\\" : \\\"Dominique\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 47, \\\"rue\\\" : \\\"Lavoisier\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e8\\\"), \\\"nom\\\" : \\\"Briu\\\", \\\"prenom\\\" : \\\"Rene\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 107, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 575608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e9\\\"), \\\"nom\\\" : \\\"Leterre\\\", \\\"prenom\\\" : \\\"Stephane\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 9, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 528608352, \\\"prime\\\" : 3500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ec\\\"), \\\"nom\\\" : \\\"Laouani\\\", \\\"prenom\\\" : \\\"Bassil\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ed\\\"), \\\"nom\\\" : \\\"Autran\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 41, \\\"rue\\\" : \\\"General DeBase\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ee\\\"), \\\"nom\\\" : \\\"Menard\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 42, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561908352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7d9\\\"), \\\"nom\\\" : \\\"King\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 27, \\\"adresse\\\" : { \\\"numero\\\" : 78, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7da\\\"), \\\"nom\\\" : \\\"Ossola\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 75, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7db\\\"), \\\"nom\\\" : \\\"Monnin\\\", \\\"prenom\\\" : \\\"Gilles\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 80, \\\"rue\\\" : \\\"General Leclerc\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dc\\\"), \\\"nom\\\" : \\\"Priou\\\", \\\"prenom\\\" : \\\"Franck\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 547608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dd\\\"), \\\"nom\\\" : \\\"Leberre\\\", \\\"prenom\\\" : \\\"Stephanie\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 559608352, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7de\\\"), \\\"nom\\\" : \\\"Rupont\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 11, \\\"adresse\\\" : { \\\"numero\\\" : 15, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7df\\\"), \\\"nom\\\" : \\\"Ving\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 17, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7e0\\\"), \\\"nom\\\" : \\\"Bass\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e1\\\"), \\\"nom\\\" : \\\"Motin\\\", \\\"prenom\\\" : \\\"Roger\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 67, \\\"rue\\\" : \\\"Jean Moulin\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e2\\\"), \\\"nom\\\" : \\\"Prito\\\", \\\"prenom\\\" : \\\"Arnaud\\\", \\\"anciennete\\\" : 6, \\\"adresse\\\" : { \\\"numero\\\" : 62, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 565608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e3\\\"), \\\"nom\\\" : \\\"Fererre\\\", \\\"prenom\\\" : \\\"Julien\\\", \\\"anciennete\\\" : 8, \\\"adresse\\\" : { \\\"numero\\\" : 24, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 577608352, \\\"prime\\\" : 4500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e4\\\"), \\\"nom\\\" : \\\"Cuponi\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e5\\\"), \\\"nom\\\" : \\\"Kingaba\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 23, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e6\\\"), \\\"nom\\\" : \\\"Sola\\\", \\\"prenom\\\" : \\\"Nicolas\\\", \\\"anciennete\\\" : 3, \\\"adresse\\\" : { \\\"numero\\\" : 45, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e7\\\"), \\\"nom\\\" : \\\"Mani\\\", \\\"prenom\\\" : \\\"Dominique\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 47, \\\"rue\\\" : \\\"Lavoisier\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e8\\\"), \\\"nom\\\" : \\\"Briu\\\", \\\"prenom\\\" : \\\"Rene\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 107, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 575608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e9\\\"), \\\"nom\\\" : \\\"Leterre\\\", \\\"prenom\\\" : \\\"Stephane\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 9, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 528608352, \\\"prime\\\" : 3500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ec\\\"), \\\"nom\\\" : \\\"Laouani\\\", \\\"prenom\\\" : \\\"Bassil\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ed\\\"), \\\"nom\\\" : \\\"Autran\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 41, \\\"rue\\\" : \\\"General DeBase\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ee\\\"), \\\"nom\\\" : \\\"Menard\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 42, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561908352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ef\\\"), \\\"nom\\\" : \\\"Landry\\\", \\\"prenom\\\" : \\\"Brunel\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561008352, \\\"prime\\\" : 7500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f0\\\"), \\\"nom\\\" : \\\"Rigal\\\", \\\"prenom\\\" : \\\"Cyril\\\", \\\"anciennete\\\" : 14, \\\"adresse\\\" : { \\\"numero\\\" : 108, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f1\\\"), \\\"nom\\\" : \\\"Dupre\\\", \\\"prenom\\\" : \\\"Bertrand\\\", \\\"anciennete\\\" : 4, \\\"adresse\\\" : { \\\"numero\\\" : 92, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f2\\\"), \\\"nom\\\" : \\\"Roy\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 5, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f3\\\"), \\\"nom\\\" : \\\"Potin\\\", \\\"prenom\\\" : \\\"Stephanie\\\", \\\"anciennete\\\" : 3, \\\"adresse\\\" : { \\\"numero\\\" : 15, \\\"rue\\\" : \\\"Jean Sens\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f4\\\"), \\\"nom\\\" : \\\"Hollande\\\", \\\"prenom\\\" : \\\"Sylvie\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 16, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96930282 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f5\\\"), \\\"nom\\\" : \\\"Chirac\\\", \\\"prenom\\\" : \\\"Melanie\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 17, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561607852, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f6\\\"), \\\"nom\\\" : \\\"Aumont\\\", \\\"prenom\\\" : \\\"Audrey\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 18, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f7\\\"), \\\"nom\\\" : \\\"Julien\\\", \\\"prenom\\\" : \\\"Marie\\\", \\\"anciennete\\\" : 11, \\\"adresse\\\" : { \\\"numero\\\" : 19, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f8\\\"), \\\"nom\\\" : \\\"Guttierrez\\\", \\\"prenom\\\" : \\\"Garard\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 75, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f9\\\"), \\\"nom\\\" : \\\"David\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"numero\\\" : 80, \\\"rue\\\" : \\\"Les tuiles\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fa\\\"), \\\"nom\\\" : \\\"Allemand\\\", \\\"prenom\\\" : \\\"Edouard\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 17, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561608552 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fb\\\"), \\\"nom\\\" : \\\"Has\\\", \\\"prenom\\\" : \\\"Stephen\\\", \\\"anciennete\\\" : 13, \\\"adresse\\\" : { \\\"numero\\\" : 7, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96930154, \\\"prime\\\" : 5000 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fc\\\"), \\\"nom\\\" : \\\"Voneschen\\\", \\\"prenom\\\" : \\\"Henri\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 25, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fd\\\"), \\\"nom\\\" : \\\"Buyot\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 14, \\\"adresse\\\" : { \\\"numero\\\" : 8, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fe\\\"), \\\"nom\\\" : \\\"Manola\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 7, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ff\\\"), \\\"nom\\\" : \\\"Perrez\\\", \\\"prenom\\\" : \\\"Gilles\\\", \\\"anciennete\\\" : 15, \\\"adresse\\\" : { \\\"numero\\\" : 2, \\\"rue\\\" : \\\"Les sabliers\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f800\\\"), \\\"nom\\\" : \\\"Pinto\\\", \\\"prenom\\\" : \\\"Franck\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 11, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96928426 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f801\\\"), \\\"nom\\\" : \\\"Baron\\\", \\\"prenom\\\" : \\\"Elodie\\\", \\\"anciennete\\\" : 16, \\\"adresse\\\" : { \\\"numero\\\" : 9, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96934634, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f802\\\"), \\\"nom\\\" : \\\"Pasqua\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 32, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f803\\\"), \\\"nom\\\" : \\\"Moore\\\", \\\"prenom\\\" : \\\"Roland\\\", \\\"anciennete\\\" : 17, \\\"adresse\\\" : { \\\"numero\\\" : 37, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f804\\\"), \\\"nom\\\" : \\\"Copola\\\", \\\"prenom\\\" : \\\"Marc\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 47, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f805\\\"), \\\"nom\\\" : \\\"Batin\\\", \\\"prenom\\\" : \\\"Orlando\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 27, \\\"rue\\\" : \\\"Les huissiers\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f806\\\"), \\\"nom\\\" : \\\"Buis\\\", \\\"prenom\\\" : \\\"James\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 10, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96935146 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa2181b16509ae5f807\\\"), \\\"nom\\\" : \\\"Balen\\\", \\\"prenom\\\" : \\\"Ortens\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 11, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 567708352, \\\"prime\\\" : 200 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7d8\\\"), \\\"nom\\\" : \\\"Dupond\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 77, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ea\\\"), \\\"nom\\\" : \\\"Caponi\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"numero\\\" : 77, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7eb\\\"), \\\"nom\\\" : \\\"Bouras\\\", \\\"prenom\\\" : \\\"Gerardo\\\", \\\"anciennete\\\" : 27, \\\"adresse\\\" : { \\\"numero\\\" : 34, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\n</code></pre>\\n<ul>\\n<li>display all documents in the collection and their number:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find();\\n</code></pre>\\n<pre><code class=\\\"language-node\\\">db.employes.find().count();\\n</code></pre>\\n<ul>\\n<li>insert data in two different ways:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.insert({nom:'Alan',prenom:'Joe',anciennete:10});\\ndb.employes.save({nom:'Wick',prenom:'John',prime:150});\\n</code></pre>\\n<ul>\\n<li>display employees whose firstnames are David:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find({prenom:'David'});\\n</code></pre>\\n<ul>\\n<li>display employees whose firstnames either start with a D or end with a d:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find({prenom:/D.*|.*d$/});\\n</code></pre>\\n<ul>\\n<li>employees whose firstnames both start and end with a vowel:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find({prenom:/^[AEIOUY].*[aeiouy]$/});\\n</code></pre>\\n<ul>\\n<li>employees with firstnames starting and ending with the same letter:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find().forEach(function(p){let pre = p.prenom.toLowerCase();if(pre.substr(0,1)==pre.substr(pre.length-1,1)){print(pre);}});\\n</code></pre>\\n<ul>\\n<li>\\n<p>display employees whose anciennete is larger than 10 years:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({anciennete:{$gt:10}},{_id:0,nom:1,prenom:1});\\n</code></pre>\\n</li>\\n<li>\\n<p>display name and address of employees whose street is known:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({'adresse.rue':{$exists:true}},{nom:1,adresse:1});\\ndb.employes.find({'adresse.rue':{$exists:true}},{nom:1,adresse:1}).limit(2).pretty();\\ndb.employes.find({'adresse.rue':{$exists:true}},{nom:1,adresse:1,_id:0}).limit(2).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>increase of 200 the prime of employees already having a prime</p>\\n<pre><code class=\\\"language-node\\\">db.employes.updateMany({prime:{$exists:true}},{$inc:{prime:200}});\\n</code></pre>\\n</li>\\n<li>\\n<p>list the first three among employees sorted in a decreasing way by seniority:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({anciennete:{$exists:true}},{_id:0}).sort({anciennete:-1}).limit(3).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>display empoyees from Toulouse with their seniority:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({'adresse.ville':'Toulouse'},{nom:1,prenom:1,anciennete:1,_id:0}).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>More <code>find</code> queries:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({$and:[{prenom:/^M/},{$or:[{'adresse.ville':'Foix'},{'adresse.ville':'Bordeaux'}]}]});\\ndb.employes.find({$and:[{prenom:/^M/},{$or:[{'adresse.ville':'Foix'},{'adresse.ville':'Bordeaux'}]}]}).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>Update operation on an employee's address:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.update({prenom: 'Dominique', nom:'Mani'},{$set:{'adresse.numero':20,'adresse.ville':'Marseille','adresse.codepostal':'13015'},$unset:{'adresse.rue':1}});\\n</code></pre>\\n</li>\\n<li>\\n<p>Add prime to employees from Toulouse and Bordeaux without primes:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.updateMany({$and:[{\\\"adresse.ville\\\":{$nin:[\\\"Paris\\\",\\\"Toulouse\\\",\\\"Bordeaux\\\"]}},{prime:{$exists:false}}]},{$set:{prime:1500}});\\n</code></pre>\\n</li>\\n<li>\\n<p>miscelaneous:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({tel:{$exists:true}},{}).forEach(function(t){db.employes.updateMany({_id:t._id},{$push:{telephone:t.tel},$unset:{tel:1}});});\\ndb.employes.find({prime:{$exists:0}}).count();\\ndb.employes.find({prime:{$exists:0}}).forEach(function(doc){var length = doc.adresse.ville.length; var newPrime = 100*length; db.employes.update({_id: doc._id},{$inc:{prime: newPrime}});});\\ndb.employes.find({prime:{$exists:0}}).count();\\ndb.employes.find().forEach(function(p){var email=p.nom+'.'+p.prenom+'@formation.fr';if(p.telephone){var email=p.prenom+'.'+p.nom+'@formation.fr';db.employes.updateMany({_id:p._id},{$set:{mail:email}})}});\\ndb.employes.aggregate({$group:{_id:'$prenom',ancienneteCum:{$sum:'$anciennete'}}},{$sort:{_id:1}});\\nObjectId(\\\"511d0aa0181b16509ae5f7f7\\\");\\n</code></pre>\\n</li>\\n</ul>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2021-10-20-mongo/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2021-10-20T10:14:00.823Z\",\"path\":\"/mongo\",\"title\":\"Mongo\",\"excerpt\":\"\",\"tags\":[\"NoSQL\",\"mongo\"]}},\"next\":{\"html\":\"<h2>Cargo commands</h2>\\n<p>Command to create a project:</p>\\n<pre><code class=\\\"language-bash\\\">cargo new hello\\n</code></pre>\\n<p>You can compile and run the project now with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run\\n</code></pre>\\n<p>This builds the project in a directory called <code>target/debug</code>.\\nTo build the project in the <code>target/release</code> directory intended for prod, just run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run --release\\n</code></pre>\\n<p>A good tip to improve the code with idiomatic rust coding hints/warnings is to run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo clippy\\n</code></pre>\\n<p>Here is a command to view the standard library in the default browser:</p>\\n<pre><code class=\\\"language-bash\\\">rustup doc --std\\n</code></pre>\\n<h3>Coding modules</h3>\\n<p>Crates are about code sharing between projects while modules are about\\ncode sharing within a project. </p>\\n<p>This can take place in a package library. This can be created with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo new todo --lib\\n</code></pre>\\n<p>Cargo modules is a useful tool to manage modules. It can be installed with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo install cargo-modules\\n</code></pre>\\n<p>Then, project's modules tree can be displayed with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo modules generate tree\\n</code></pre>\\n<p>The displayed tree can be refined with options:</p>\\n<pre><code class=\\\"language-bash\\\">cargo modules generate tree --with-types\\n</code></pre>\\n<h2>Strings</h2>\\n<p>String slices refered to as <code>str</code>\\nare almost always handled in the shape of borrowed string slices <code>&#x26;str</code>.\\nSee also the Rust documentation on <a href=\\\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\\\">references and borrowing</a>.</p>\\n<p>A string literal stated\\n<code>let msg = \\\"Hello 🌎\\\";</code>\\nis a borrowed string slice.</p>\\n<p>The other string type is String.\\nData in a borrowed string slice cannot be modified\\nwhile data in a String can be modified.</p>\\n<p>A String can be obtained by applying the to_string() method on a\\nborrowed string slice:</p>\\n<pre><code>let msg = \\\"ab🎉\\\".to_string();\\n</code></pre>\\n<p>or else by passing the borrowed string slice to String::from:</p>\\n<pre><code>let msg = String::from(\\\"ab🎉\\\");\\n</code></pre>\\n<p>Internally, a borrowed string slice is made up of a pointer to some byte and\\na length. The length is the number of unicode characters in the string.</p>\\n<p>Bytes can be extracted from a borrowed string slice with the bytes() method: <code>word.bytes();</code></p>\\n<p>An iterator on unicode scalars can be built with <code>word.chars();</code></p>\\n<p>Additionally, an iterator on graphemes can be retrieved using a package called unicode-segmentation with:</p>\\n<p><code>graphemes(my_string, true)</code></p>\\n<p>A given item in the graphemes can then be accessed with by appending a statement like<code>.nth(3)</code></p>\\n<p>All of the helper methods to manipulate String objects are documented\\n<a href=\\\"https://doc.rust-lang.org/std/string/struct.String.html#method.bytes\\\">here</a>.</p>\\n<p>A String can be converted into a &#x26;str with the <code>.as_str()</code> method.\\nIt follows that string slices can manipulated in the shape of String objects\\nand the latter can be converted back into string slices with <code>as_str()</code>.\\nFor instance two <code>&#x26;str</code> can be concatenated into a string c with:</p>\\n<pre><code class=\\\"language-bash\\\">let a = \\\"Hello\\\";\\nlet b = \\\" World\\\";\\nlet c = format!(\\\"{}{}\\\", a, b);\\n</code></pre>\\n<h2>String literals</h2>\\n<pre><code class=\\\"language-rust\\\">let rust = \\\"\\\\x52\\\\x75\\\\x73\\\\x74\\\";\\nprintln!(\\\"{}\\\", rust);\\n</code></pre>\\n<h2>Struct with impl</h2>\\n<pre><code class=\\\"language-rust\\\">struct Square {\\n    width: u32,\\n    height: u32,\\n}\\n\\nimpl Square {\\n    fn area(&#x26;self) -> u32 {\\n        self.width * self.height\\n    }\\n\\n    fn whats_my_width(&#x26;self) -> u32 {\\n        self.width\\n    }\\n\\n    fn change_width(&#x26;mut self, new_width: u32){\\n        self.width = new_width;\\n    }\\n}\\n</code></pre>\\n<h2>Struct with Trait</h2>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct RedFox {\\n    enemy: bool,\\n    life: u32,\\n}\\n\\ntrait Noisy {\\n    fn get_noise(&#x26;self) -> &#x26;str;\\n}\\n\\nimpl Noisy for RedFox {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"Meow?\\\" }\\n}\\n\\nfn print_noise&#x3C;T: Noisy>(item: T) {\\n    println!(\\\"\\\", item.get_noise());\\n}\\n\\nimpl Noisy for u8 {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"BYTE!\\\" }\\n}\\n\\nfn main() {\\n    print_noise(5_u8); // prints \\\"BYTE!\\\"\\n}\\n</code></pre>\\n<p>There are two other types of Struct. One is the tuple like Struct:</p>\\n<pre><code class=\\\"language-rust\\\">struct Coordinates(i32, i32, i32);\\n</code></pre>\\n<p>The other is the unit like Struct which is useful when combined with Traits:</p>\\n<pre><code class=\\\"language-rust\\\">struct UnitStruct;\\n</code></pre>\\n<h2>Utility Traits</h2>\\n<ul>\\n<li>The Drop Trait:</li>\\n</ul>\\n<pre><code class=\\\"language-rust\\\">struct Course {\\n    headline: String,\\n    author: String,\\n}\\n\\nimpl Drop for Course {\\n    fn drop(&#x26;mut self) {\\n        println!(\\\"Dropping: {}\\\", self.author);\\n    }\\n}\\n\\nfn main() {\\n    let course1 = Course{ headline: String::from(\\\"Headline!\\\"), author: String::from(\\\"Tyler\\\"), };\\n\\n    drop(course1);\\n}\\n</code></pre>\\n<ul>\\n<li>The Clone Trait which is for types that can make copies of themselves :</li>\\n</ul>\\n<pre><code class=\\\"language-rust\\\">trait Clone: Sized {\\n    fn clone(&#x26;self) -> Self;\\n    fn clone_from(&#x26;mut self, source: &#x26;Self) {\\n        *self = source.clone()\\n    }\\n}\\n</code></pre>\\n<ul>\\n<li>\\n<p>Copy is a shallow Clone</p>\\n</li>\\n<li>\\n<p>From and Into, plus: TryFrom and TryInto</p>\\n</li>\\n</ul>\\n<p><code>fn into(self) -> T</code>: take self and returns a value of type T.</p>\\n<p><code>fn from(T) -> Self</code>: take a value of type T and returns self.</p>\\n<ul>\\n<li>Arithmetics: the Add Trait</li>\\n</ul>\\n<pre><code class=\\\"language-bash\\\">use std::ops::Add;\\n\\n#[derive(Debug)]\\nstruct Point&#x3C;T> {\\n    x: T,\\n    y: T\\n}\\n\\nfn main() {\\n    let coord = Point{ x: 5.0, y: 5.0 };\\n    let coord2 = Point{ x: 1.0, y: 2.0 };\\n    let sum = coord + coord2;\\n    println!(\\\"{:?}\\\", sum);\\n}\\n\\nimpl&#x3C;T> Add for Point&#x3C;T>\\n    where\\n    T: Add&#x3C;Output = T> {\\n        type Output = Self;        \\n        fn add(self, rhs: Self) -> Self {\\n            Point {\\n                x: self.x + rhs.x,\\n                y: self.y + rhs.y,\\n            }\\n        }\\n    }\\n</code></pre>\\n<ul>\\n<li>\\n<p>Fn is a family of closures and functions that you can call multiple times without restrictions. It borrows values from the environment immutably. It includes all fn functions.</p>\\n</li>\\n<li>\\n<p>FnMut is a family of closures and functions that you can call multiple times if the closure itself is declared mut. It immutably borrows values.</p>\\n</li>\\n<li>\\n<p>FnOnce is a family of closures that can be called once if the caller owns the closure. The closure cannot take ownership of the same variables more than once.</p>\\n</li>\\n</ul>\\n<p>Therefore, every Fn meets the requirements for FnMut and every FnMut meets the requirements for FnOnce. It means that Fn is the most exclusive and the most powerful in this set of three Traits.</p>\\n<p>Examples: </p>\\n<ul>\\n<li>\\n<p>|| drop(v) FnOnce  ---> FnOnce</p>\\n</li>\\n<li>\\n<p>|args| v.contains(arg) ---> Fn</p>\\n</li>\\n<li>\\n<p>|args| v.push(arg)  ---> FnMut</p>\\n</li>\\n<li>\\n<p>Iterator</p>\\n</li>\\n</ul>\\n<h2>Lifetimes</h2>\\n<p>Every reference has a Lifetime. Most of the time, Lifetimes are implicit and inferred.</p>\\n<pre><code class=\\\"language-rust\\\">fn longest&#x3C;'a>(x: &#x26;'a str, y: &#x26;'a str) -> &#x26;'a str {\\n    if x.len() > y.len() {\\n        x\\n    } else {\\n        y\\n    }\\n}\\n</code></pre>\\n<p>Syntax for lifetime in a struct is as follows:</p>\\n<pre><code class=\\\"language-rust\\\">struct MyString&#x3C;'a> {\\n    text: &#x26;'a str\\n}\\n</code></pre>\\n<p>Here is an example of a variable defined with a static lifetime:</p>\\n<pre><code class=\\\"language-rust\\\">let s: &#x26;'static str = \\\"I have static lifetime\\\";\\n</code></pre>\\n<h2>Vectors</h2>\\n<pre><code class=\\\"language-rust\\\">let mut v: Vec&#x3C;i32> = Vec::new();\\nv.push(2);\\nv.push(4);\\nv.push(6);\\nlet x = v.pop();    // x is 6\\nprintln(\\\"{}\\\", v[1]);// prints \\\"4\\\"\\nlet mut u = vec![2, 4, 6];\\n</code></pre>\\n<p>Other ways to instanciate vectors: </p>\\n<pre><code class=\\\"language-rust\\\">let vect= Vec::&#x3C;i32>::with_capacity(2);\\nprintln!(\\\"{}\\\", vect.capacity());\\n\\nlet v: Vec&#x3C;i32> = (0..5).collect();\\nprintln!(\\\"{:?}\\\", v);\\n</code></pre>\\n<p>Vector API examples:</p>\\n<pre><code class=\\\"language-rust\\\">let mut nums: Vec&#x3C;i32> = vec![];\\nnums.push(1);\\nnums.push(2);\\nnums.push(3);\\n\\nlet pop = nums.pop(); // returns Option&#x3C;T>: None or Some(T)\\nprintln!(\\\"{:?}\\\", pop);\\nlet number = pop.unwrap();\\nprintln!(\\\"{}\\\", number);\\n\\nlet two = nums[1]; // copy\\n// &#x26;nums[1], creates a reference if copy is not available \\n// (here we get a copy since i32 is a primitive type)\\nprintln!(\\\"{}\\\", two);\\n\\nlet one = nums.first(); // return an Option&#x3C;T> \\n                        // so None if nums is empty, else Some&#x3C;T>\\nprintln!(\\\"{:?}\\\", one);\\n\\n// .last\\n// .first_mut and .last_mut will borrow mutable references\\n\\nprintln!(\\\"{}\\\", nums.len()); // return a value of length\\nprintln!(\\\"{}\\\", nums.is_empty()); // bool\\n\\nnums.insert(0, 10);\\nnums.insert(3, 12);\\nnums.insert(2, 25);\\n\\nnums.remove(3);\\n\\nnums.sort();\\nprintln!(\\\"{:?}\\\", nums);\\n\\nnums.reverse();\\nprintln!(\\\"{:?}\\\", nums);\\n\\nnums.shuffle(&#x26;mut thread_rng());\\nprintln!(\\\"{:?}\\\", nums);\\n</code></pre>\\n<h2>Iterators</h2>\\n<p>Vec is an example of a standard object that implements the Iterator Trait.</p>\\n<p>Example 1:</p>\\n<pre><code class=\\\"language-rust\\\">let vec2 = vec![1, 2, 3];\\nlet mut iter = (&#x26;vec2).into_iter();\\nwhile let Some(v) = iter.next() {\\n    println!(\\\"{}\\\", v);\\n}\\n</code></pre>\\n<p>Example 2:</p>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct Item {\\n    name: String,\\n}\\n\\nfn check_inventory(items: Vec&#x3C;Item>, product: String) -> Vec&#x3C;Item> {\\n    items.into_iter().filter(|i| i.name == product).collect()\\n}\\n\\nfn main() {\\n    let mut vec: Vec&#x3C;Item> = Vec::new();\\n    vec.push(Item { name: String::from(\\\"coat\\\") });\\n    vec.push(Item { name: String::from(\\\"shirt\\\") });\\n    vec.push(Item { name: String::from(\\\"shorts\\\") });\\n    vec.push(Item { name: String::from(\\\"shoes\\\") });\\n\\n    let checked = check_inventory(vec, String::from(\\\"shirt\\\"));\\n    println!(\\\"{:?}\\\", checked);\\n}\\n</code></pre>\\n<p>Example 3:</p>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct Range {\\n    start: u32,\\n    end: u32,\\n}\\n\\nimpl Iterator for Range {\\n    type Item = u32;\\n    fn next(&#x26;mut self) -> Option&#x3C;Self::Item> {\\n        if self.start >= self.end {\\n            return None;\\n        }\\n        let result = Some(self.start);\\n        self.start += 1;\\n        result\\n    }\\n}\\n\\nfn main() {\\n    let mut range = Range {start: 0, end: 10};\\n    // for r in range {\\n    //     println!(\\\"{}\\\", r);\\n    // }\\n\\n    let vec: Vec&#x3C;u32> = range.filter(|x| x % 2 == 0).collect();\\n    println!(\\\"{:?}\\\",vec);\\n}\\n</code></pre>\\n<h2>Slices</h2>\\n<pre><code class=\\\"language-rust\\\">let v: Vec&#x3C;i32> = (0..5).collect();\\nprintln!(\\\"{:?}\\\", v);\\n\\nlet sv: &#x26;[i32] = &#x26;v[2..4];\\nprintln!(\\\"{:?}\\\", sv);\\n</code></pre>\\n<p>A slice is a fat pointer i.e. a non owning reference to a <strong>range</strong> of consecutive values.</p>\\n<h2>Hashmaps</h2>\\n<pre><code class=\\\"language-rust\\\">let mut h: HashMap&#x3C;u8, bool> = HashMap::new();\\nh.insert(5, true);\\nh.insert(6, false);\\nlet have_five = h.remove(&#x26;5).unwrap();\\n</code></pre>\\n<p>Hashmap API examples:</p>\\n<pre><code class=\\\"language-rust\\\">let mut hm = HashMap::new();\\nhm.insert(1, 1);\\nhm.insert(5, 2);\\nhm.insert(30, 3);\\nlet old = hm.insert(30, 4);\\nprintln!(\\\"{:?}\\\", hm);\\nprintln!(\\\"{:?}\\\", old);\\n\\nprintln!(\\\"{:?}\\\", hm.contains_key(&#x26;8));\\nprintln!(\\\"{:?}\\\", hm.get(&#x26;5));\\n\\nlet one = hm.remove(&#x26;1);\\nprintln!(\\\"{:?}\\\", one);\\n\\nlet removed = hm.remove_entry(&#x26;5);\\nprintln!(\\\"{:?}\\\", removed);\\n\\nhm.clear();\\nprintln!(\\\"{}\\\", hm.is_empty());\\n</code></pre>\\n<p>Other collections: VecDeque, LinkedList, HashSet, BinaryHeap, BTreeMap, BTreeSet</p>\\n<h2>HashSets</h2>\\n<pre><code class=\\\"language-rust\\\">let mut hs = HashSet::new();\\nhs.insert(1);\\nhs.insert(2);\\nhs.insert(3);\\nhs.insert(4);\\nhs.remove(&#x26;2);\\nfor x in hs.iter() {\\n    println!(\\\"inter: {}\\\", x);\\n}\\n\\nlet mut hs2 = HashSet::new();\\nhs2.insert(1);\\nhs2.insert(3);\\nhs2.insert(5);\\nhs2.insert(7);\\nfor x in hs.intersection(&#x26;hs2) {\\n    println!(\\\"intersection: {}\\\", x);\\n}\\n\\nlet intersection = &#x26;hs &#x26; &#x26;hs2;\\nfor x in intersection {\\n    println!(\\\"short hand way: {}\\\", x);\\n}\\n\\nlet union = &#x26;hs | &#x26;hs2;\\nfor x in union {\\n    println!(\\\"union: {}\\\", x);\\n}\\n</code></pre>\\n<h2>Enums</h2>\\n<pre><code class=\\\"language-rust\\\">enum Color {\\n    Red,\\n    Green,\\n    Blue,\\n}\\nlet color = Color::Red;\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">enum DispenserItem {\\n    Empty,\\n    Ammo(u8),\\n    Things(String, i32),\\n    Place {x: i32, y: i32},\\n}\\n\\nuse DispenserItem::*;\\nlet item1 = Ammo(69);\\nlet item2 = Things(\\\"hat\\\".to_string(), 7);\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">enum Pet {dog, cat, fish}\\n\\nimpl Pet {\\n    fn what_am_i(self) -> &#x26;'static str {\\n        match self {\\n            Pet::dog => \\\"I am a dog\\\",\\n            Pet::cat => \\\"I am a cat\\\",\\n            Pet::fish => \\\"I am a fish\\\",\\n        }\\n    }\\n}\\n</code></pre>\\n<h3>The rust predefined Option enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Option&#x3C;T> {\\n    Some(T),\\n    None,\\n}\\n\\nlet mut x: Option&#x3C;i32> =  None;\\nx = Some(5);\\nx.is_some(); // true\\nx.is_none(); false\\nfor i in x {\\n    println!(\\\"{}\\\", i); // prints 5\\n}\\n</code></pre>\\n<p>The match expression handles the case when we can have Some<T> or Node:</p>\\n<pre><code class=\\\"language-rust\\\">enum Pet {dog, cat, fish}\\n\\nfn main () {\\n    let dog = Pet::dog;\\n    println!(\\\"{}\\\", dog.what_am_i());\\n\\n    let some_number = Some(5);\\n    let some_string = Some(\\\"a string\\\");\\n    let nothing: Option&#x3C;i32> = None;\\n\\n    let x: i32 = 5;\\n    let y: Option&#x3C;i32> = Some(5);\\n\\n    let sum = x + y;\\n\\n    let five = Some(5);\\n    let six = plus_one(five);\\n    let none = plus_one(None);\\n\\n    println!(\\\"{:?}\\\", six);\\n\\n    let noneUnw = None.unwrap_or(7);\\n    println!(\\\"unw: {:?}\\\", noneUnw);\\n\\n    what_pet(\\\"dog\\\");\\n    what_pet(\\\"cat\\\");\\n    what_pet(\\\"cow\\\");\\n}\\n\\nfn plus_one(x: Option&#x3C;i32>) -> Option&#x3C;i32> {\\n    match x {\\n        None => None,\\n        Some(i) => Some(i + 1),\\n    }\\n}\\n\\nfn plus_one_unw(x: Option&#x3C;i32>) -> i32 {\\n    match x {\\n        None => 0,\\n        Some(i) => i + 1,\\n    }\\n}\\n\\nfn what_pet(input: &#x26;str) {\\n    match input {\\n        \\\"dog\\\" => println!(\\\"I have a dog!\\\"),\\n        \\\"fish\\\" => println!(\\\"I have a fish!\\\"),\\n        \\\"cat\\\" => println!(\\\"I have a cat!\\\"),\\n        _ => println!(\\\"I have no clue what pet I have\\\"),\\n    }\\n}\\n</code></pre>\\n<h3>The rust predefined Result enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Result&#x3C;T, E> {\\n    Ok(T),\\n    Err(E),\\n}\\n</code></pre>\\n<p>Example with Result:</p>\\n<pre><code class=\\\"language-rust\\\">use std::fs::File;\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.unwrap();\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.expect(\\\"error message\\\");\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.is_ok() {\\n        let f = res.unwrap();\\n    }\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    match res {\\n        Ok(f) => { /* do stuff */ },\\n        Err(e) => { /* do stuff */ },\\n    }\\n}\\n</code></pre>\\n<h3>Ownership, references  &#x26; borrowing</h3>\\n<p>There are 3 rules to ownership:</p>\\n<ol>\\n<li>Each value has an owner</li>\\n<li>There is only one owner of a value</li>\\n<li>Value gets dropped if its owner goes out of scope</li>\\n</ol>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;mut i32\\n*x // a mutable i32\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;i32\\n*x: // an immutable i32\\n</code></pre>\\n<p>At any time, it is possible to have one mutable reference\\nor any number of immutable references to a given value.</p>\\n<p>A borrowed variable passed to a function can be dereferenced in two ways.\\nThe first way is automated deferencing:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    s.insert_str(0, \\\"Hi, \\\");\\n}\\n</code></pre>\\n<p>And the second way is manual:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    *s = String::from(\\\"Replacement\\\")\\n}\\n</code></pre>\\n<h2>Raw Pointers</h2>\\n<p><a href=\\\"https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/\\\">Programming Rust, 2nd Ed</a>:</p>\\n<p><em>Rust also has the raw pointer types *mut T and *const T. Raw\\npointers really are just like pointers in C++. Using a raw\\npointer is unsafe, because Rust makes no eﬀort to track what\\nit points to. For example, raw pointers may be null, or they\\nmay point to memory that has been freed or that now\\ncontains a value of a diﬀerent type.</em> </p>\\n<p><em>All the classic pointer\\nmistakes of C++ are oﬀered for your enjoyment.\\nHowever, you may only dereference raw pointers within an\\nunsafe block. An unsafe block is Rust’s opt-in mechanism for\\nadvanced language features whose safety is up to you.</em></p>\\n<h2>Smart Pointers</h2>\\n<p>Box is a smart pointer that allows to allocate data on the heap\\nin a straighforward way:</p>\\n<pre><code class=\\\"language-rust\\\">let t = (12, \\\"eggs\\\"); // created on the stack\\nlet b = Box::new(t); // created on the heap, but b was stored on the stack\\nprintln!(\\\"{:?}\\\", b);\\n\\nlet x = 5;\\nlet y = &#x26;x;\\nassert_eq!(5, x);\\nassert_eq!(5, *y);\\n\\nlet x = 5;\\nlet y = Box::new(x);\\nassert_eq!(5, x);\\nassert_eq!(5, *y);\\n\\nprintln!(\\\"{:?}\\\", y);\\n</code></pre>\\n<p>Rc is a reference counter that handles and count multiple references to a value.</p>\\n<pre><code class=\\\"language-rust\\\">let s1 = Rc::new(String::from(\\\"Pointer\\\"));\\nlet s2 = s1.clone();\\nlet s3 = s2.clone();\\nprintln!(\\\"{}, {},{}\\\", s1.contains(\\\"Point\\\"), s2, s3.contains(\\\"er\\\"));\\n</code></pre>\\n<p>RefCell allows to mutate data hold in an object whose reference is immutable.</p>\\n<pre><code class=\\\"language-rust\\\">use std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nstruct Flagger {\\n    is_true: RefCell&#x3C;bool>,\\n}\\n\\nlet flag= Flagger { is_true: Rc::new(RefCell::new(true)) };\\n// borrow returns Ref&#x3C;T>\\n// borrow_mut return RefMut&#x3C;T>\\n\\nlet reference = Rc::new(flag.is_true.clone());\\nprintln!(\\\"{:?}\\\", reference);\\n\\nlet mut mut_ref = reference.borrow_mut();\\n*mut_ref = false; // dereference first to access inside\\nprintln!(\\\"{}\\\", mut_ref);\\n</code></pre>\\n<h2>Error handling</h2>\\n<p>Errors split into two categories: </p>\\n<ul>\\n<li>recoverable errors which rely on the result type</li>\\n<li>unrecoverable errors where the panic macro is used. It terminates the current thread.</li>\\n</ul>\\n<p>Example on how to catch an error at opening a file:</p>\\n<pre><code class=\\\"language-rust\\\">let file = File::open(\\\"error.txt\\\");\\nlet file = match file {\\n    Ok(file) => file,\\n    Err(error) => match error.kind() {\\n        ErrorKind::NotFound => match File::create(\\\"error.txt\\\") {\\n            Ok(file_created) => file_created,\\n            Err(err) => panic!(\\\"Cannot create the file: {:?}\\\", err),\\n        },\\n        _ => panic!(\\\"It was some other error kind\\\"),\\n    },\\n};\\n</code></pre>\\n<p>Here is a simple way to panic and get information on error with logs:</p>\\n<pre><code class=\\\"language-rust\\\">let file = File::open(\\\"error.txt\\\").expect(\\\"Error opening the file!\\\");\\n</code></pre>\\n<p>Finally, an error that occurs in a function can be propagated upwards to the calling\\ncontext by adding a question mark to the calling statement like here:</p>\\n<pre><code class=\\\"language-rust\\\">fn open_file() -> Result&#x3C;File, Error> {\\n    let file = File::open(\\\"error.txt\\\")?;\\n    Ok(file)\\n}\\n</code></pre>\\n<h2>Unit test</h2>\\n<pre><code class=\\\"language-rust\\\">#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn it_works() {\\n        let result = 2 + 2;\\n        assert_ne!(result, 5);\\n    }\\n\\n    #[test]\\n    #[should_panic]\\n    fn it_fails(){\\n        panic!(\\\"Test failed!\\\");\\n    }\\n\\n    #[test]\\n    fn call_simple_add(){\\n        assert!(simple_add());\\n    }\\n\\n}\\n\\nfn simple_add() -> bool {\\n    if 2+2 == 4 {\\n        true\\n    } else {\\n        false\\n    }\\n}\\n</code></pre>\\n<h2>Concurrency</h2>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\n\\nfn main() {\\n    let handle = thread::spawn(move || {\\n        println!(\\\"Hello from a thread!\\\")\\n    });\\n\\n    handle.join().unwrap();\\n    println!(\\\"Hello from main\\\");\\n\\n}\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\n\\nfn main() {\\n    let v = vec![1, 2, 3];\\n    let mut thread_handles = Vec::new();\\n\\n    for e in v {\\n        // Here the move keyword is forcing the closure to take ownership:\\n        thread_handles.push(thread::spawn(move || println!(\\\"{:?}\\\", e)));\\n    }\\n\\n    println!(\\\"Main thread!\\\");\\n    \\n    for handle in thread_handles {\\n        handle.join().unwrap();\\n    }\\n}\\n</code></pre>\\n<p>Threads can communicate between each other with channels.\\nA channel has a transmitter and a receiver. A channel\\nis considered closed when either the transmitter or the\\nreceiver is dropped.</p>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\nuse std::sync::mpsc; // multi producer single consumer\\n\\nfn main() {\\n    let (transmitter, receiver) = mpsc::channel();\\n    \\n    let val = String::from(\\\"Transmitting!\\\");\\n    thread::spawn(move || {\\n        transmitter.send(val).unwrap();\\n    });\\n\\n    let msg = receiver.recv().unwrap();\\n    println!(\\\"{}\\\", msg);\\n}\\n</code></pre>\\n<p>Types that implement Send are safe to pass by value to another thread. They can be moved accross threads. </p>\\n<p>Types that implement Sync are safe to pass by non mutable reference to another thread. They can be shared accross threads. </p>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\nuse std::sync::Arc;\\n\\nfn main() {\\n    let rc1 = Arc::new(String::from(\\\"test\\\"));\\n    let rc2 = rc1.clone();\\n    thread::spawn(move || {\\n        rc2;\\n    });\\n}\\n</code></pre>\\n<p>Mutexes allow to manage the access of a variable by several thread.</p>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\nuse std::sync::{Arc, Mutex};\\n\\nfn main() {\\n    let counter = Arc::new(Mutex::new(0));\\n    let mut handles = vec![];\\n    \\n    for _ in 0..8 {\\n        let counter = Arc::clone(&#x26;counter);\\n        let handle = thread::spawn(move || {\\n            let mut num = counter.lock().unwrap();\\n            *num += 1;\\n        });\\n        handles.push(handle);\\n    }\\n\\n    for handle in handles {\\n        handle.join().unwrap();\\n    }\\n    \\n    println!(\\\"{}\\\", counter.lock().unwrap());\\n}\\n</code></pre>\\n<h2>Webassembly</h2>\\n<h3>Setting up of environment</h3>\\n<pre><code class=\\\"language-bash\\\">rustup update\\nrustc --version\\ncargo install cargo-generate\\ncurl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\\nnvm install 16.15.0\\n</code></pre>\\n<h3>Starting a project</h3>\\n<p>Run the command:</p>\\n<pre><code class=\\\"language-bash\\\">cargo generate --git https://github.com/rustwasm/wasm-pack-template\\n</code></pre>\\n<p>and enter a project name, e.g. wasm-game-of-life when prompted.</p>\\n<pre><code class=\\\"language-bash\\\">cd wasm-game-of-life\\nwasm-pack build\\nnpm init wasm-app www\\ncd www\\nnpm start\\n</code></pre>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-02-06-rust/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-02-06T10:17:00.823Z\",\"path\":\"/rust\",\"title\":\"Rust\",\"excerpt\":\"\",\"tags\":[\"rust\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---kubernetes-03f6a4fbbad292e85d2f.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Terminology</h2>\\n<ul>\\n<li>kubernetes / k8s / kube: the whole orchestration system</li>\\n<li>kubeclt aka cube control: cli to configure kubernetes and manage apps</li>\\n<li>node: single server in the k8s cluster</li>\\n<li>kubelet: k8s agent running on nodes</li>\\n<li>each kubelet can have a kube-proxy controlling its networking</li>\\n<li>control plane aka the \\\"master\\\": set of containers that manage the cluster. Includes api server, scheduler, controller manager, etcd, core DNS and more</li>\\n</ul>\\n<p>A possible local Kubernetes environment could be composed of the following applications: </p>\\n<ul>\\n<li>minikube: a local cluster which can be installed and run on your machine. </li>\\n<li>kubectl: the interface to interact with the cluster</li>\\n<li>k9s: a CLI to monitor and manage your local kubernetes clusters</li>\\n</ul>\\n<!-- ## Links\\n\\nKubernetes in a browser:  \\n\\ntry [http://play-with-k8s.com](http://play-with-k8s.com)\\nor [katacoda.com](katacoda.com) in browser -->\\n<h1>Local install</h1>\\n<p>Follow documentation on <a href=\\\"https://minikube.sigs.k8s.io/docs/start/\\\">this page</a> to install minikube locally.</p>\\n<p>You can then check your minikube status with: </p>\\n<pre><code class=\\\"language-bash\\\">minikube status\\n</code></pre>\\n<p>It can be started if necessary with</p>\\n<pre><code class=\\\"language-bash\\\">minikube start\\n</code></pre>\\n<p>Install now kubectl following documentation on <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/\\\">this page</a>. </p>\\n<p>The <a href=\\\"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#optional-kubectl-configurations-and-plugins\\\">Optional kubectl configurations and plugins</a> can be skipped in a first stage.</p>\\n<p>Configuration can be verified with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl cluster-info\\n</code></pre>\\n<p>You can find out the location of your kubectl executable with:</p>\\n<pre><code class=\\\"language-bash\\\">which kubectl\\n</code></pre>\\n<p>Download the <code>k9s_Linux_x86_64.tar.gz</code> archive available on\\n<a href=\\\"https://github.com/derailed/k9s/releases\\\">this page</a> from the k9s github.\\nOnce it is extracted, just execute k9s with:</p>\\n<pre><code class=\\\"language-bash\\\">./k9s\\n</code></pre>\\n<h2>Pod commands together with a proper example to apply them:</h2>\\n<p><code>kubectl get pod</code><br>\\nget information about all running pods  </p>\\n<p><code>kubectl describe pod &#x3C;pod></code><br>\\ndescribe one pod  </p>\\n<p><code>kubectl expose pod &#x3C;pod> --port=444 --name=frontend</code><br>\\nexpose the port of a pod (creates a new service)  </p>\\n<p><code>kubectl port-forward &#x3C;pod> 8080</code><br>\\nport forward the exposed pod port to your local machine  </p>\\n<p><code>kubectl attach &#x3C;podname> -i</code><br>\\nattach to the pod  </p>\\n<p><code>kubectl exec &#x3C;pod> -- command</code><br>\\nexecute a command on the pod  </p>\\n<p><code>kubectl label pods &#x3C;pod> mylabel=awesome</code><br>\\nadd a new label to a pod  </p>\\n<p><code>kubectl run -i --tty busybox --image=busybox --restart=Never -- sh</code><br>\\nrun a shell in a pod  </p>\\n<p>With the following example of a pod description\\nin a file called <code>helloworld.yml</code>,</p>\\n<pre><code class=\\\"language-yaml\\\">apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: nodehelloworld.example.com\\n  labels:\\n    app: helloworld\\nspec:\\n  containers:\\n  - name: k8s-demo\\n    image: wardviaene/k8s-demo\\n    ports:\\n    - name: nodejs-port\\n      containerPort: 3000\\n</code></pre>\\n<p>The pod can be created with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl create -f helloworld.yml\\n</code></pre>\\n<p>Then, local port 8081 can be forwarded to port 3000 of the pod with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl port-forward nodehelloworld.example.com 8081:3000\\n</code></pre>\\n<p>Or else we can create a service of type NodePort to expose the pod with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehelloworld-service\\n</code></pre>\\n<p>The end point to that service from the local machine can be displayed with:</p>\\n<pre><code class=\\\"language-bash\\\">minikube service nodehelloworld-service --url\\n</code></pre>\\n<p>IP addresses of services within the cluster are different. They can be accessed with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get service\\n</code></pre>\\n<p>It is possible to attach to the pod and watch the possible logs with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl attach nodehelloworld.example.com\\n</code></pre>\\n<p>To execute a command like <code>ls /app</code> run the following line:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl exec nodehelloworld.example.com -- ls /app\\n</code></pre>\\n<p>It is instructive to run the two following commands now:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl exec nodehelloworld.example.com -- touch /app/test.txt\\nkubectl exec nodehelloworld.example.com -- ls /app\\n</code></pre>\\n<p>To operate with a bash prompt in a pod use the following command: </p>\\n<pre><code class=\\\"language-bash\\\">kubectl exec nodehelloworld.example.com -i -t -- /bin/bash\\n</code></pre>\\n<p>A description of the pod can be displayed with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl describe service nodehelloworld-service\\n</code></pre>\\n<p>Launch another pod based on the busybox image with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl run -i --tty busybox --image=busybox --restart=Never -- sh\\n</code></pre>\\n<p>Let us assume that the endpoint of our nodehelloworld-service displayed in its description was 172.17.0.2:3000. Then, commands can be executed in the shell of our busybox like:</p>\\n<pre><code class=\\\"language-bash\\\">ls\\ntelnet 172.17.0.2 3000\\n</code></pre>\\n<p>Pods can finally be deleted with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete pod busybox\\nkubectl delete pod nodehelloworld.example.com\\n</code></pre>\\n<p>You can also delete the service nodehelloworld-service with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete service nodehelloworld-service\\n</code></pre>\\n<h2>Starting a cluster with an nginx container</h2>\\n<p>Create a file called <code>deployment.yaml</code> with the following content:</p>\\n<pre><code class=\\\"language-yaml\\\">apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: nginx-deployment\\n  labels:\\n    app: nginx\\nspec:\\n  selector:\\n    matchLabels:\\n      app: nginx\\n  template:\\n    metadata:\\n      labels:\\n        app: nginx\\n    spec:\\n      containers:\\n      - name: nginx\\n        image: nginx:1.21.4\\n        ports:\\n        - containerPort: 80\\n</code></pre>\\n<p>Create another file called <code>service.yaml</code> with the following content:</p>\\n<pre><code class=\\\"language-yaml\\\">apiVersion: v1\\nkind: Service\\nmetadata:\\n  name: nginx-service\\n  labels:\\n    app: nginx\\nspec:\\n  selector:\\n    app: nginx\\n  ports:\\n    - protocol: TCP\\n      port: 80\\n      targetPort: 80\\n  type: LoadBalancer\\n</code></pre>\\n<p>Cluster can now be started with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -f deployment.yaml\\n</code></pre>\\n<p>followed with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl apply -f service.yaml\\n</code></pre>\\n<p>To display services execute:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get services\\n</code></pre>\\n<p>The following command is an interesting one to run now:</p>\\n<pre><code class=\\\"language-bash\\\">minikube service nginx-service\\n</code></pre>\\n<p>since it displays the url of the nginx-service and opens the latter\\nservice in your default browser.</p>\\n<p>To display namespaces execute:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get namespaces\\n</code></pre>\\n<p>To find out the namespace where pods have been created you can run this command:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get pods --all-namespaces\\n</code></pre>\\n<p>To stop one of the pods displayed whose name is for instance <code>hello-minikube-6ddfcc9757-h4ctx</code>\\nexecute the following command:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete -n default pod hello-minikube-6ddfcc9757-h4ctx\\n</code></pre>\\n<p>To display deployments currently running execute:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get deployments\\n</code></pre>\\n<p>To delete a service first display all of your services with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl get service -o wide\\n</code></pre>\\n<p>You can now pick the one you wish to delete from the displayed list\\n--- for instance nginx-service --- and then delete it with:</p>\\n<pre><code class=\\\"language-bash\\\">kubectl delete service nginx-service\\n</code></pre>\\n<p>Delete deployment nginx-deployment with:</p>\\n<pre><code class=\\\"language-bash\\\">delete deployment nginx-deployment\\n</code></pre>\\n<h2>Minikube example</h2>\\n<pre><code class=\\\"language-bash\\\">kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">kubectl expose deployment hello-minikube --type=NodePort --port=8080\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">minikube service hello-minikube\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">kubectl delete deployment hello-minikube\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">minikube stop\\n</code></pre>\\n<p>The minikube vm can optionally be completely reset with:</p>\\n<pre><code class=\\\"language-bash\\\">minikube delete\\n</code></pre>\\n<p>After this, Minikube will start from scratch the next time it is started.</p>\\n<h2>Advanced topics</h2>\\n<h4>Service discovery</h4>\\n<pre><code class=\\\"language-zsh\\\">kubectl run -i --tty busybox --image=busybox --restart=Never -- sh\\n</code></pre>\\n<pre><code class=\\\"language-sh\\\">cat /etc/resolv.conf\\n</code></pre>\\n<pre><code class=\\\"language-zsh\\\">kubectl exec database -i -t -- mysql -u root -p\\n</code></pre>\\n<h4>ConfigMap</h4>\\n<pre><code class=\\\"language-sh\\\">kubectl create configmap app-config --fromfile=app.properties\\n</code></pre>\\n<h4>Ingress Controller</h4>\\n<h4>External DNS</h4>\\n<h4>Volumes</h4>\",\"frontmatter\":{\"title\":\"Kubernetes\",\"date\":\"November 25, 2021\",\"path\":\"/kubernetes\",\"tags\":[\"kubernetes\",\"cloud\",\"devops\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<h2>Links</h2>\\n<ul>\\n<li><a href=\\\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\\\">installing and starting mongodb locally</a></li>\\n<li><a href=\\\"https://linuxize.com/post/how-to-install-mongodb-on-ubuntu-18-04/\\\">some tips on configuration</a></li>\\n</ul>\\n<h2>Starting server and shell</h2>\\n<p>Start mongodb server with:</p>\\n<pre><code class=\\\"language-bash\\\">sudo service mongod start\\n</code></pre>\\n<pre><code class=\\\"language-bash\\\">sudo service mongod status\\n</code></pre>\\n<p>To verify whether the installation has completed successfully, connect to the MongoDB database server using the mongo tool and print the connection status with:</p>\\n<pre><code class=\\\"language-bash\\\">mongo --eval 'db.runCommand({ connectionStatus: 1 })'\\n</code></pre>\\n<p>Shell can now be started with:</p>\\n<pre><code class=\\\"language-bash\\\">mongo\\n</code></pre>\\n<h2>Example</h2>\\n<pre><code class=\\\"language-node\\\">db.createCollection('employes');\\n</code></pre>\\n<ul>\\n<li>display all of the collections in the database:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">show collections;\\n</code></pre>\\n<ul>\\n<li>insert data:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7d9\\\"), \\\"nom\\\" : \\\"King\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 27, \\\"adresse\\\" : { \\\"numero\\\" : 78, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7da\\\"), \\\"nom\\\" : \\\"Ossola\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 75, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7db\\\"), \\\"nom\\\" : \\\"Monnin\\\", \\\"prenom\\\" : \\\"Gilles\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 80, \\\"rue\\\" : \\\"General Leclerc\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dc\\\"), \\\"nom\\\" : \\\"Priou\\\", \\\"prenom\\\" : \\\"Franck\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 547608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dd\\\"), \\\"nom\\\" : \\\"Leberre\\\", \\\"prenom\\\" : \\\"Stephanie\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 559608352, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7de\\\"), \\\"nom\\\" : \\\"Rupont\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 11, \\\"adresse\\\" : { \\\"numero\\\" : 15, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7df\\\"), \\\"nom\\\" : \\\"Ving\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 17, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7e0\\\"), \\\"nom\\\" : \\\"Bass\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e1\\\"), \\\"nom\\\" : \\\"Motin\\\", \\\"prenom\\\" : \\\"Roger\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 67, \\\"rue\\\" : \\\"Jean Moulin\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e2\\\"), \\\"nom\\\" : \\\"Prito\\\", \\\"prenom\\\" : \\\"Arnaud\\\", \\\"anciennete\\\" : 6, \\\"adresse\\\" : { \\\"numero\\\" : 62, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 565608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e3\\\"), \\\"nom\\\" : \\\"Fererre\\\", \\\"prenom\\\" : \\\"Julien\\\", \\\"anciennete\\\" : 8, \\\"adresse\\\" : { \\\"numero\\\" : 24, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 577608352, \\\"prime\\\" : 4500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e4\\\"), \\\"nom\\\" : \\\"Cuponi\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e5\\\"), \\\"nom\\\" : \\\"Kingaba\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 23, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 33000, \\\"ville\\\"); db.employes.save(: \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e6\\\"), \\\"nom\\\" : \\\"Sola\\\", \\\"prenom\\\" : \\\"Nicolas\\\", \\\"anciennete\\\" : 3, \\\"adresse\\\" : { \\\"numero\\\" : 45, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e7\\\"), \\\"nom\\\" : \\\"Mani\\\", \\\"prenom\\\" : \\\"Dominique\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 47, \\\"rue\\\" : \\\"Lavoisier\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e8\\\"), \\\"nom\\\" : \\\"Briu\\\", \\\"prenom\\\" : \\\"Rene\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 107, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 575608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e9\\\"), \\\"nom\\\" : \\\"Leterre\\\", \\\"prenom\\\" : \\\"Stephane\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 9, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 528608352, \\\"prime\\\" : 3500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ec\\\"), \\\"nom\\\" : \\\"Laouani\\\", \\\"prenom\\\" : \\\"Bassil\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ed\\\"), \\\"nom\\\" : \\\"Autran\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 41, \\\"rue\\\" : \\\"General DeBase\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ee\\\"), \\\"nom\\\" : \\\"Menard\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 42, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561908352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7d9\\\"), \\\"nom\\\" : \\\"King\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 27, \\\"adresse\\\" : { \\\"numero\\\" : 78, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7da\\\"), \\\"nom\\\" : \\\"Ossola\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 75, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7db\\\"), \\\"nom\\\" : \\\"Monnin\\\", \\\"prenom\\\" : \\\"Gilles\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 80, \\\"rue\\\" : \\\"General Leclerc\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dc\\\"), \\\"nom\\\" : \\\"Priou\\\", \\\"prenom\\\" : \\\"Franck\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 547608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7dd\\\"), \\\"nom\\\" : \\\"Leberre\\\", \\\"prenom\\\" : \\\"Stephanie\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 559608352, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7de\\\"), \\\"nom\\\" : \\\"Rupont\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 11, \\\"adresse\\\" : { \\\"numero\\\" : 15, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7df\\\"), \\\"nom\\\" : \\\"Ving\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 17, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7e0\\\"), \\\"nom\\\" : \\\"Bass\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e1\\\"), \\\"nom\\\" : \\\"Motin\\\", \\\"prenom\\\" : \\\"Roger\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 67, \\\"rue\\\" : \\\"Jean Moulin\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e2\\\"), \\\"nom\\\" : \\\"Prito\\\", \\\"prenom\\\" : \\\"Arnaud\\\", \\\"anciennete\\\" : 6, \\\"adresse\\\" : { \\\"numero\\\" : 62, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 565608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e3\\\"), \\\"nom\\\" : \\\"Fererre\\\", \\\"prenom\\\" : \\\"Julien\\\", \\\"anciennete\\\" : 8, \\\"adresse\\\" : { \\\"numero\\\" : 24, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 577608352, \\\"prime\\\" : 4500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e4\\\"), \\\"nom\\\" : \\\"Cuponi\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 28, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e5\\\"), \\\"nom\\\" : \\\"Kingaba\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 23, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e6\\\"), \\\"nom\\\" : \\\"Sola\\\", \\\"prenom\\\" : \\\"Nicolas\\\", \\\"anciennete\\\" : 3, \\\"adresse\\\" : { \\\"numero\\\" : 45, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e7\\\"), \\\"nom\\\" : \\\"Mani\\\", \\\"prenom\\\" : \\\"Dominique\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 47, \\\"rue\\\" : \\\"Lavoisier\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e8\\\"), \\\"nom\\\" : \\\"Briu\\\", \\\"prenom\\\" : \\\"Rene\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 107, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 575608352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7e9\\\"), \\\"nom\\\" : \\\"Leterre\\\", \\\"prenom\\\" : \\\"Stephane\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 9, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 528608352, \\\"prime\\\" : 3500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ec\\\"), \\\"nom\\\" : \\\"Laouani\\\", \\\"prenom\\\" : \\\"Bassil\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 38, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ed\\\"), \\\"nom\\\" : \\\"Autran\\\", \\\"prenom\\\" : \\\"Vincent\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 41, \\\"rue\\\" : \\\"General DeBase\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ee\\\"), \\\"nom\\\" : \\\"Menard\\\", \\\"prenom\\\" : \\\"Eric\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 42, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561908352 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ef\\\"), \\\"nom\\\" : \\\"Landry\\\", \\\"prenom\\\" : \\\"Brunel\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 79, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561008352, \\\"prime\\\" : 7500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f0\\\"), \\\"nom\\\" : \\\"Rigal\\\", \\\"prenom\\\" : \\\"Cyril\\\", \\\"anciennete\\\" : 14, \\\"adresse\\\" : { \\\"numero\\\" : 108, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f1\\\"), \\\"nom\\\" : \\\"Dupre\\\", \\\"prenom\\\" : \\\"Bertrand\\\", \\\"anciennete\\\" : 4, \\\"adresse\\\" : { \\\"numero\\\" : 92, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f2\\\"), \\\"nom\\\" : \\\"Roy\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 5, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f3\\\"), \\\"nom\\\" : \\\"Potin\\\", \\\"prenom\\\" : \\\"Stephanie\\\", \\\"anciennete\\\" : 3, \\\"adresse\\\" : { \\\"numero\\\" : 15, \\\"rue\\\" : \\\"Jean Sens\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f4\\\"), \\\"nom\\\" : \\\"Hollande\\\", \\\"prenom\\\" : \\\"Sylvie\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 16, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96930282 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f5\\\"), \\\"nom\\\" : \\\"Chirac\\\", \\\"prenom\\\" : \\\"Melanie\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 17, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561607852, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f6\\\"), \\\"nom\\\" : \\\"Aumont\\\", \\\"prenom\\\" : \\\"Audrey\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 18, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f7\\\"), \\\"nom\\\" : \\\"Julien\\\", \\\"prenom\\\" : \\\"Marie\\\", \\\"anciennete\\\" : 11, \\\"adresse\\\" : { \\\"numero\\\" : 19, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f8\\\"), \\\"nom\\\" : \\\"Guttierrez\\\", \\\"prenom\\\" : \\\"Garard\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 75, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7f9\\\"), \\\"nom\\\" : \\\"David\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"numero\\\" : 80, \\\"rue\\\" : \\\"Les tuiles\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fa\\\"), \\\"nom\\\" : \\\"Allemand\\\", \\\"prenom\\\" : \\\"Edouard\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 17, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 561608552 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fb\\\"), \\\"nom\\\" : \\\"Has\\\", \\\"prenom\\\" : \\\"Stephen\\\", \\\"anciennete\\\" : 13, \\\"adresse\\\" : { \\\"numero\\\" : 7, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96930154, \\\"prime\\\" : 5000 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fc\\\"), \\\"nom\\\" : \\\"Voneschen\\\", \\\"prenom\\\" : \\\"Henri\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 25, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fd\\\"), \\\"nom\\\" : \\\"Buyot\\\", \\\"prenom\\\" : \\\"David\\\", \\\"anciennete\\\" : 14, \\\"adresse\\\" : { \\\"numero\\\" : 8, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7fe\\\"), \\\"nom\\\" : \\\"Manola\\\", \\\"prenom\\\" : \\\"Christophe\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 7, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ff\\\"), \\\"nom\\\" : \\\"Perrez\\\", \\\"prenom\\\" : \\\"Gilles\\\", \\\"anciennete\\\" : 15, \\\"adresse\\\" : { \\\"numero\\\" : 2, \\\"rue\\\" : \\\"Les sabliers\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f800\\\"), \\\"nom\\\" : \\\"Pinto\\\", \\\"prenom\\\" : \\\"Franck\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 11, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96928426 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f801\\\"), \\\"nom\\\" : \\\"Baron\\\", \\\"prenom\\\" : \\\"Elodie\\\", \\\"anciennete\\\" : 16, \\\"adresse\\\" : { \\\"numero\\\" : 9, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96934634, \\\"prime\\\" : 1500 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f802\\\"), \\\"nom\\\" : \\\"Pasqua\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 32, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f803\\\"), \\\"nom\\\" : \\\"Moore\\\", \\\"prenom\\\" : \\\"Roland\\\", \\\"anciennete\\\" : 17, \\\"adresse\\\" : { \\\"numero\\\" : 37, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f804\\\"), \\\"nom\\\" : \\\"Copola\\\", \\\"prenom\\\" : \\\"Marc\\\", \\\"anciennete\\\" : 7, \\\"adresse\\\" : { \\\"numero\\\" : 47, \\\"codepostal\\\" : 75000, \\\"ville\\\" : \\\"Paris\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f805\\\"), \\\"nom\\\" : \\\"Batin\\\", \\\"prenom\\\" : \\\"Orlando\\\", \\\"anciennete\\\" : 2, \\\"adresse\\\" : { \\\"numero\\\" : 27, \\\"rue\\\" : \\\"Les huissiers\\\", \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f806\\\"), \\\"nom\\\" : \\\"Buis\\\", \\\"prenom\\\" : \\\"James\\\", \\\"anciennete\\\" : 5, \\\"adresse\\\" : { \\\"numero\\\" : 10, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 96935146 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa2181b16509ae5f807\\\"), \\\"nom\\\" : \\\"Balen\\\", \\\"prenom\\\" : \\\"Ortens\\\", \\\"anciennete\\\" : 1, \\\"adresse\\\" : { \\\"numero\\\" : 11, \\\"codepostal\\\" : 9500, \\\"ville\\\" : \\\"Foix\\\" }, \\\"tel\\\" : 567708352, \\\"prime\\\" : 200 });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0a9f181b16509ae5f7d8\\\"), \\\"nom\\\" : \\\"Dupond\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 10, \\\"adresse\\\" : { \\\"numero\\\" : 77, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7ea\\\"), \\\"nom\\\" : \\\"Caponi\\\", \\\"prenom\\\" : \\\"Jean\\\", \\\"anciennete\\\" : 12, \\\"adresse\\\" : { \\\"numero\\\" : 77, \\\"codepostal\\\" : 31000, \\\"ville\\\" : \\\"Toulouse\\\" } });\\ndb.employes.save({ \\\"_id\\\" : ObjectId(\\\"511d0aa0181b16509ae5f7eb\\\"), \\\"nom\\\" : \\\"Bouras\\\", \\\"prenom\\\" : \\\"Gerardo\\\", \\\"anciennete\\\" : 27, \\\"adresse\\\" : { \\\"numero\\\" : 34, \\\"codepostal\\\" : 33000, \\\"ville\\\" : \\\"Bordeaux\\\" } });\\n</code></pre>\\n<ul>\\n<li>display all documents in the collection and their number:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find();\\n</code></pre>\\n<pre><code class=\\\"language-node\\\">db.employes.find().count();\\n</code></pre>\\n<ul>\\n<li>insert data in two different ways:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.insert({nom:'Alan',prenom:'Joe',anciennete:10});\\ndb.employes.save({nom:'Wick',prenom:'John',prime:150});\\n</code></pre>\\n<ul>\\n<li>display employees whose firstnames are David:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find({prenom:'David'});\\n</code></pre>\\n<ul>\\n<li>display employees whose firstnames either start with a D or end with a d:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find({prenom:/D.*|.*d$/});\\n</code></pre>\\n<ul>\\n<li>employees whose firstnames both start and end with a vowel:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find({prenom:/^[AEIOUY].*[aeiouy]$/});\\n</code></pre>\\n<ul>\\n<li>employees with firstnames starting and ending with the same letter:</li>\\n</ul>\\n<pre><code class=\\\"language-node\\\">db.employes.find().forEach(function(p){let pre = p.prenom.toLowerCase();if(pre.substr(0,1)==pre.substr(pre.length-1,1)){print(pre);}});\\n</code></pre>\\n<ul>\\n<li>\\n<p>display employees whose anciennete is larger than 10 years:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({anciennete:{$gt:10}},{_id:0,nom:1,prenom:1});\\n</code></pre>\\n</li>\\n<li>\\n<p>display name and address of employees whose street is known:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({'adresse.rue':{$exists:true}},{nom:1,adresse:1});\\ndb.employes.find({'adresse.rue':{$exists:true}},{nom:1,adresse:1}).limit(2).pretty();\\ndb.employes.find({'adresse.rue':{$exists:true}},{nom:1,adresse:1,_id:0}).limit(2).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>increase of 200 the prime of employees already having a prime</p>\\n<pre><code class=\\\"language-node\\\">db.employes.updateMany({prime:{$exists:true}},{$inc:{prime:200}});\\n</code></pre>\\n</li>\\n<li>\\n<p>list the first three among employees sorted in a decreasing way by seniority:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({anciennete:{$exists:true}},{_id:0}).sort({anciennete:-1}).limit(3).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>display empoyees from Toulouse with their seniority:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({'adresse.ville':'Toulouse'},{nom:1,prenom:1,anciennete:1,_id:0}).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>More <code>find</code> queries:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({$and:[{prenom:/^M/},{$or:[{'adresse.ville':'Foix'},{'adresse.ville':'Bordeaux'}]}]});\\ndb.employes.find({$and:[{prenom:/^M/},{$or:[{'adresse.ville':'Foix'},{'adresse.ville':'Bordeaux'}]}]}).pretty();\\n</code></pre>\\n</li>\\n<li>\\n<p>Update operation on an employee's address:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.update({prenom: 'Dominique', nom:'Mani'},{$set:{'adresse.numero':20,'adresse.ville':'Marseille','adresse.codepostal':'13015'},$unset:{'adresse.rue':1}});\\n</code></pre>\\n</li>\\n<li>\\n<p>Add prime to employees from Toulouse and Bordeaux without primes:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.updateMany({$and:[{\\\"adresse.ville\\\":{$nin:[\\\"Paris\\\",\\\"Toulouse\\\",\\\"Bordeaux\\\"]}},{prime:{$exists:false}}]},{$set:{prime:1500}});\\n</code></pre>\\n</li>\\n<li>\\n<p>miscelaneous:</p>\\n<pre><code class=\\\"language-node\\\">db.employes.find({tel:{$exists:true}},{}).forEach(function(t){db.employes.updateMany({_id:t._id},{$push:{telephone:t.tel},$unset:{tel:1}});});\\ndb.employes.find({prime:{$exists:0}}).count();\\ndb.employes.find({prime:{$exists:0}}).forEach(function(doc){var length = doc.adresse.ville.length; var newPrime = 100*length; db.employes.update({_id: doc._id},{$inc:{prime: newPrime}});});\\ndb.employes.find({prime:{$exists:0}}).count();\\ndb.employes.find().forEach(function(p){var email=p.nom+'.'+p.prenom+'@formation.fr';if(p.telephone){var email=p.prenom+'.'+p.nom+'@formation.fr';db.employes.updateMany({_id:p._id},{$set:{mail:email}})}});\\ndb.employes.aggregate({$group:{_id:'$prenom',ancienneteCum:{$sum:'$anciennete'}}},{$sort:{_id:1}});\\nObjectId(\\\"511d0aa0181b16509ae5f7f7\\\");\\n</code></pre>\\n</li>\\n</ul>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2021-10-20-mongo/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2021-10-20T10:14:00.823Z\",\"path\":\"/mongo\",\"title\":\"Mongo\",\"excerpt\":\"\",\"tags\":[\"NoSQL\",\"mongo\"]}},\"next\":{\"html\":\"<h2>Cargo commands</h2>\\n<p>Command to create a project:</p>\\n<pre><code class=\\\"language-bash\\\">cargo new hello\\n</code></pre>\\n<p>You can compile and run the project now with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run\\n</code></pre>\\n<p>This builds the project in a directory called <code>target/debug</code>.\\nTo build the project in the <code>target/release</code> directory intended for prod, just run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo run --release\\n</code></pre>\\n<p>A good tip to improve the code with idiomatic rust coding hints/warnings is to run:</p>\\n<pre><code class=\\\"language-bash\\\">cargo clippy\\n</code></pre>\\n<p>Here is a command to view the standard library in the default browser:</p>\\n<pre><code class=\\\"language-bash\\\">rustup doc --std\\n</code></pre>\\n<h3>Coding modules</h3>\\n<p>Crates are about code sharing between projects while modules are about\\ncode sharing within a project. </p>\\n<p>This can take place in a package library. This can be created with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo new todo --lib\\n</code></pre>\\n<p>Cargo modules is a useful tool to manage modules. It can be installed with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo install cargo-modules\\n</code></pre>\\n<p>Then, project's modules tree can be displayed with:</p>\\n<pre><code class=\\\"language-bash\\\">cargo modules generate tree\\n</code></pre>\\n<p>The displayed tree can be refined with options:</p>\\n<pre><code class=\\\"language-bash\\\">cargo modules generate tree --with-types\\n</code></pre>\\n<h2>Strings</h2>\\n<p>String slices refered to as <code>str</code>\\nare almost always handled in the shape of borrowed string slices <code>&#x26;str</code>.\\nSee also the Rust documentation on <a href=\\\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\\\">references and borrowing</a>.</p>\\n<p>A string literal stated\\n<code>let msg = \\\"Hello 🌎\\\";</code>\\nis a borrowed string slice.</p>\\n<p>The other string type is String.\\nData in a borrowed string slice cannot be modified\\nwhile data in a String can be modified.</p>\\n<p>A String can be obtained by applying the to_string() method on a\\nborrowed string slice:</p>\\n<pre><code>let msg = \\\"ab🎉\\\".to_string();\\n</code></pre>\\n<p>or else by passing the borrowed string slice to String::from:</p>\\n<pre><code>let msg = String::from(\\\"ab🎉\\\");\\n</code></pre>\\n<p>Internally, a borrowed string slice is made up of a pointer to some byte and\\na length. The length is the number of unicode characters in the string.</p>\\n<p>Bytes can be extracted from a borrowed string slice with the bytes() method: <code>word.bytes();</code></p>\\n<p>An iterator on unicode scalars can be built with <code>word.chars();</code></p>\\n<p>Additionally, an iterator on graphemes can be retrieved using a package called unicode-segmentation with:</p>\\n<p><code>graphemes(my_string, true)</code></p>\\n<p>A given item in the graphemes can then be accessed with by appending a statement like<code>.nth(3)</code></p>\\n<p>All of the helper methods to manipulate String objects are documented\\n<a href=\\\"https://doc.rust-lang.org/std/string/struct.String.html#method.bytes\\\">here</a>.</p>\\n<p>A String can be converted into a &#x26;str with the <code>.as_str()</code> method.\\nIt follows that string slices can manipulated in the shape of String objects\\nand the latter can be converted back into string slices with <code>as_str()</code>.\\nFor instance two <code>&#x26;str</code> can be concatenated into a string c with:</p>\\n<pre><code class=\\\"language-bash\\\">let a = \\\"Hello\\\";\\nlet b = \\\" World\\\";\\nlet c = format!(\\\"{}{}\\\", a, b);\\n</code></pre>\\n<h2>String literals</h2>\\n<pre><code class=\\\"language-rust\\\">let rust = \\\"\\\\x52\\\\x75\\\\x73\\\\x74\\\";\\nprintln!(\\\"{}\\\", rust);\\n</code></pre>\\n<h2>Struct with impl</h2>\\n<pre><code class=\\\"language-rust\\\">struct Square {\\n    width: u32,\\n    height: u32,\\n}\\n\\nimpl Square {\\n    fn area(&#x26;self) -> u32 {\\n        self.width * self.height\\n    }\\n\\n    fn whats_my_width(&#x26;self) -> u32 {\\n        self.width\\n    }\\n\\n    fn change_width(&#x26;mut self, new_width: u32){\\n        self.width = new_width;\\n    }\\n}\\n</code></pre>\\n<h2>Struct with Trait</h2>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct RedFox {\\n    enemy: bool,\\n    life: u32,\\n}\\n\\ntrait Noisy {\\n    fn get_noise(&#x26;self) -> &#x26;str;\\n}\\n\\nimpl Noisy for RedFox {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"Meow?\\\" }\\n}\\n\\nfn print_noise&#x3C;T: Noisy>(item: T) {\\n    println!(\\\"\\\", item.get_noise());\\n}\\n\\nimpl Noisy for u8 {\\n    fn get_noise(&#x26;self) -> &#x26;str { \\\"BYTE!\\\" }\\n}\\n\\nfn main() {\\n    print_noise(5_u8); // prints \\\"BYTE!\\\"\\n}\\n</code></pre>\\n<p>There are two other types of Struct. One is the tuple like Struct:</p>\\n<pre><code class=\\\"language-rust\\\">struct Coordinates(i32, i32, i32);\\n</code></pre>\\n<p>The other is the unit like Struct which is useful when combined with Traits:</p>\\n<pre><code class=\\\"language-rust\\\">struct UnitStruct;\\n</code></pre>\\n<h2>Utility Traits</h2>\\n<ul>\\n<li>The Drop Trait:</li>\\n</ul>\\n<pre><code class=\\\"language-rust\\\">struct Course {\\n    headline: String,\\n    author: String,\\n}\\n\\nimpl Drop for Course {\\n    fn drop(&#x26;mut self) {\\n        println!(\\\"Dropping: {}\\\", self.author);\\n    }\\n}\\n\\nfn main() {\\n    let course1 = Course{ headline: String::from(\\\"Headline!\\\"), author: String::from(\\\"Tyler\\\"), };\\n\\n    drop(course1);\\n}\\n</code></pre>\\n<ul>\\n<li>The Clone Trait which is for types that can make copies of themselves :</li>\\n</ul>\\n<pre><code class=\\\"language-rust\\\">trait Clone: Sized {\\n    fn clone(&#x26;self) -> Self;\\n    fn clone_from(&#x26;mut self, source: &#x26;Self) {\\n        *self = source.clone()\\n    }\\n}\\n</code></pre>\\n<ul>\\n<li>\\n<p>Copy is a shallow Clone</p>\\n</li>\\n<li>\\n<p>From and Into, plus: TryFrom and TryInto</p>\\n</li>\\n</ul>\\n<p><code>fn into(self) -> T</code>: take self and returns a value of type T.</p>\\n<p><code>fn from(T) -> Self</code>: take a value of type T and returns self.</p>\\n<ul>\\n<li>Arithmetics: the Add Trait</li>\\n</ul>\\n<pre><code class=\\\"language-bash\\\">use std::ops::Add;\\n\\n#[derive(Debug)]\\nstruct Point&#x3C;T> {\\n    x: T,\\n    y: T\\n}\\n\\nfn main() {\\n    let coord = Point{ x: 5.0, y: 5.0 };\\n    let coord2 = Point{ x: 1.0, y: 2.0 };\\n    let sum = coord + coord2;\\n    println!(\\\"{:?}\\\", sum);\\n}\\n\\nimpl&#x3C;T> Add for Point&#x3C;T>\\n    where\\n    T: Add&#x3C;Output = T> {\\n        type Output = Self;        \\n        fn add(self, rhs: Self) -> Self {\\n            Point {\\n                x: self.x + rhs.x,\\n                y: self.y + rhs.y,\\n            }\\n        }\\n    }\\n</code></pre>\\n<ul>\\n<li>\\n<p>Fn is a family of closures and functions that you can call multiple times without restrictions. It borrows values from the environment immutably. It includes all fn functions.</p>\\n</li>\\n<li>\\n<p>FnMut is a family of closures and functions that you can call multiple times if the closure itself is declared mut. It immutably borrows values.</p>\\n</li>\\n<li>\\n<p>FnOnce is a family of closures that can be called once if the caller owns the closure. The closure cannot take ownership of the same variables more than once.</p>\\n</li>\\n</ul>\\n<p>Therefore, every Fn meets the requirements for FnMut and every FnMut meets the requirements for FnOnce. It means that Fn is the most exclusive and the most powerful in this set of three Traits.</p>\\n<p>Examples: </p>\\n<ul>\\n<li>\\n<p>|| drop(v) FnOnce  ---> FnOnce</p>\\n</li>\\n<li>\\n<p>|args| v.contains(arg) ---> Fn</p>\\n</li>\\n<li>\\n<p>|args| v.push(arg)  ---> FnMut</p>\\n</li>\\n<li>\\n<p>Iterator</p>\\n</li>\\n</ul>\\n<h2>Lifetimes</h2>\\n<p>Every reference has a Lifetime. Most of the time, Lifetimes are implicit and inferred.</p>\\n<pre><code class=\\\"language-rust\\\">fn longest&#x3C;'a>(x: &#x26;'a str, y: &#x26;'a str) -> &#x26;'a str {\\n    if x.len() > y.len() {\\n        x\\n    } else {\\n        y\\n    }\\n}\\n</code></pre>\\n<p>Syntax for lifetime in a struct is as follows:</p>\\n<pre><code class=\\\"language-rust\\\">struct MyString&#x3C;'a> {\\n    text: &#x26;'a str\\n}\\n</code></pre>\\n<p>Here is an example of a variable defined with a static lifetime:</p>\\n<pre><code class=\\\"language-rust\\\">let s: &#x26;'static str = \\\"I have static lifetime\\\";\\n</code></pre>\\n<h2>Vectors</h2>\\n<pre><code class=\\\"language-rust\\\">let mut v: Vec&#x3C;i32> = Vec::new();\\nv.push(2);\\nv.push(4);\\nv.push(6);\\nlet x = v.pop();    // x is 6\\nprintln(\\\"{}\\\", v[1]);// prints \\\"4\\\"\\nlet mut u = vec![2, 4, 6];\\n</code></pre>\\n<p>Other ways to instanciate vectors: </p>\\n<pre><code class=\\\"language-rust\\\">let vect= Vec::&#x3C;i32>::with_capacity(2);\\nprintln!(\\\"{}\\\", vect.capacity());\\n\\nlet v: Vec&#x3C;i32> = (0..5).collect();\\nprintln!(\\\"{:?}\\\", v);\\n</code></pre>\\n<p>Vector API examples:</p>\\n<pre><code class=\\\"language-rust\\\">let mut nums: Vec&#x3C;i32> = vec![];\\nnums.push(1);\\nnums.push(2);\\nnums.push(3);\\n\\nlet pop = nums.pop(); // returns Option&#x3C;T>: None or Some(T)\\nprintln!(\\\"{:?}\\\", pop);\\nlet number = pop.unwrap();\\nprintln!(\\\"{}\\\", number);\\n\\nlet two = nums[1]; // copy\\n// &#x26;nums[1], creates a reference if copy is not available \\n// (here we get a copy since i32 is a primitive type)\\nprintln!(\\\"{}\\\", two);\\n\\nlet one = nums.first(); // return an Option&#x3C;T> \\n                        // so None if nums is empty, else Some&#x3C;T>\\nprintln!(\\\"{:?}\\\", one);\\n\\n// .last\\n// .first_mut and .last_mut will borrow mutable references\\n\\nprintln!(\\\"{}\\\", nums.len()); // return a value of length\\nprintln!(\\\"{}\\\", nums.is_empty()); // bool\\n\\nnums.insert(0, 10);\\nnums.insert(3, 12);\\nnums.insert(2, 25);\\n\\nnums.remove(3);\\n\\nnums.sort();\\nprintln!(\\\"{:?}\\\", nums);\\n\\nnums.reverse();\\nprintln!(\\\"{:?}\\\", nums);\\n\\nnums.shuffle(&#x26;mut thread_rng());\\nprintln!(\\\"{:?}\\\", nums);\\n</code></pre>\\n<h2>Iterators</h2>\\n<p>Vec is an example of a standard object that implements the Iterator Trait.</p>\\n<p>Example 1:</p>\\n<pre><code class=\\\"language-rust\\\">let vec2 = vec![1, 2, 3];\\nlet mut iter = (&#x26;vec2).into_iter();\\nwhile let Some(v) = iter.next() {\\n    println!(\\\"{}\\\", v);\\n}\\n</code></pre>\\n<p>Example 2:</p>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct Item {\\n    name: String,\\n}\\n\\nfn check_inventory(items: Vec&#x3C;Item>, product: String) -> Vec&#x3C;Item> {\\n    items.into_iter().filter(|i| i.name == product).collect()\\n}\\n\\nfn main() {\\n    let mut vec: Vec&#x3C;Item> = Vec::new();\\n    vec.push(Item { name: String::from(\\\"coat\\\") });\\n    vec.push(Item { name: String::from(\\\"shirt\\\") });\\n    vec.push(Item { name: String::from(\\\"shorts\\\") });\\n    vec.push(Item { name: String::from(\\\"shoes\\\") });\\n\\n    let checked = check_inventory(vec, String::from(\\\"shirt\\\"));\\n    println!(\\\"{:?}\\\", checked);\\n}\\n</code></pre>\\n<p>Example 3:</p>\\n<pre><code class=\\\"language-rust\\\">#[derive(Debug)]\\nstruct Range {\\n    start: u32,\\n    end: u32,\\n}\\n\\nimpl Iterator for Range {\\n    type Item = u32;\\n    fn next(&#x26;mut self) -> Option&#x3C;Self::Item> {\\n        if self.start >= self.end {\\n            return None;\\n        }\\n        let result = Some(self.start);\\n        self.start += 1;\\n        result\\n    }\\n}\\n\\nfn main() {\\n    let mut range = Range {start: 0, end: 10};\\n    // for r in range {\\n    //     println!(\\\"{}\\\", r);\\n    // }\\n\\n    let vec: Vec&#x3C;u32> = range.filter(|x| x % 2 == 0).collect();\\n    println!(\\\"{:?}\\\",vec);\\n}\\n</code></pre>\\n<h2>Slices</h2>\\n<pre><code class=\\\"language-rust\\\">let v: Vec&#x3C;i32> = (0..5).collect();\\nprintln!(\\\"{:?}\\\", v);\\n\\nlet sv: &#x26;[i32] = &#x26;v[2..4];\\nprintln!(\\\"{:?}\\\", sv);\\n</code></pre>\\n<p>A slice is a fat pointer i.e. a non owning reference to a <strong>range</strong> of consecutive values.</p>\\n<h2>Hashmaps</h2>\\n<pre><code class=\\\"language-rust\\\">let mut h: HashMap&#x3C;u8, bool> = HashMap::new();\\nh.insert(5, true);\\nh.insert(6, false);\\nlet have_five = h.remove(&#x26;5).unwrap();\\n</code></pre>\\n<p>Hashmap API examples:</p>\\n<pre><code class=\\\"language-rust\\\">let mut hm = HashMap::new();\\nhm.insert(1, 1);\\nhm.insert(5, 2);\\nhm.insert(30, 3);\\nlet old = hm.insert(30, 4);\\nprintln!(\\\"{:?}\\\", hm);\\nprintln!(\\\"{:?}\\\", old);\\n\\nprintln!(\\\"{:?}\\\", hm.contains_key(&#x26;8));\\nprintln!(\\\"{:?}\\\", hm.get(&#x26;5));\\n\\nlet one = hm.remove(&#x26;1);\\nprintln!(\\\"{:?}\\\", one);\\n\\nlet removed = hm.remove_entry(&#x26;5);\\nprintln!(\\\"{:?}\\\", removed);\\n\\nhm.clear();\\nprintln!(\\\"{}\\\", hm.is_empty());\\n</code></pre>\\n<p>Other collections: VecDeque, LinkedList, HashSet, BinaryHeap, BTreeMap, BTreeSet</p>\\n<h2>HashSets</h2>\\n<pre><code class=\\\"language-rust\\\">let mut hs = HashSet::new();\\nhs.insert(1);\\nhs.insert(2);\\nhs.insert(3);\\nhs.insert(4);\\nhs.remove(&#x26;2);\\nfor x in hs.iter() {\\n    println!(\\\"inter: {}\\\", x);\\n}\\n\\nlet mut hs2 = HashSet::new();\\nhs2.insert(1);\\nhs2.insert(3);\\nhs2.insert(5);\\nhs2.insert(7);\\nfor x in hs.intersection(&#x26;hs2) {\\n    println!(\\\"intersection: {}\\\", x);\\n}\\n\\nlet intersection = &#x26;hs &#x26; &#x26;hs2;\\nfor x in intersection {\\n    println!(\\\"short hand way: {}\\\", x);\\n}\\n\\nlet union = &#x26;hs | &#x26;hs2;\\nfor x in union {\\n    println!(\\\"union: {}\\\", x);\\n}\\n</code></pre>\\n<h2>Enums</h2>\\n<pre><code class=\\\"language-rust\\\">enum Color {\\n    Red,\\n    Green,\\n    Blue,\\n}\\nlet color = Color::Red;\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">enum DispenserItem {\\n    Empty,\\n    Ammo(u8),\\n    Things(String, i32),\\n    Place {x: i32, y: i32},\\n}\\n\\nuse DispenserItem::*;\\nlet item1 = Ammo(69);\\nlet item2 = Things(\\\"hat\\\".to_string(), 7);\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">enum Pet {dog, cat, fish}\\n\\nimpl Pet {\\n    fn what_am_i(self) -> &#x26;'static str {\\n        match self {\\n            Pet::dog => \\\"I am a dog\\\",\\n            Pet::cat => \\\"I am a cat\\\",\\n            Pet::fish => \\\"I am a fish\\\",\\n        }\\n    }\\n}\\n</code></pre>\\n<h3>The rust predefined Option enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Option&#x3C;T> {\\n    Some(T),\\n    None,\\n}\\n\\nlet mut x: Option&#x3C;i32> =  None;\\nx = Some(5);\\nx.is_some(); // true\\nx.is_none(); false\\nfor i in x {\\n    println!(\\\"{}\\\", i); // prints 5\\n}\\n</code></pre>\\n<p>The match expression handles the case when we can have Some<T> or Node:</p>\\n<pre><code class=\\\"language-rust\\\">enum Pet {dog, cat, fish}\\n\\nfn main () {\\n    let dog = Pet::dog;\\n    println!(\\\"{}\\\", dog.what_am_i());\\n\\n    let some_number = Some(5);\\n    let some_string = Some(\\\"a string\\\");\\n    let nothing: Option&#x3C;i32> = None;\\n\\n    let x: i32 = 5;\\n    let y: Option&#x3C;i32> = Some(5);\\n\\n    let sum = x + y;\\n\\n    let five = Some(5);\\n    let six = plus_one(five);\\n    let none = plus_one(None);\\n\\n    println!(\\\"{:?}\\\", six);\\n\\n    let noneUnw = None.unwrap_or(7);\\n    println!(\\\"unw: {:?}\\\", noneUnw);\\n\\n    what_pet(\\\"dog\\\");\\n    what_pet(\\\"cat\\\");\\n    what_pet(\\\"cow\\\");\\n}\\n\\nfn plus_one(x: Option&#x3C;i32>) -> Option&#x3C;i32> {\\n    match x {\\n        None => None,\\n        Some(i) => Some(i + 1),\\n    }\\n}\\n\\nfn plus_one_unw(x: Option&#x3C;i32>) -> i32 {\\n    match x {\\n        None => 0,\\n        Some(i) => i + 1,\\n    }\\n}\\n\\nfn what_pet(input: &#x26;str) {\\n    match input {\\n        \\\"dog\\\" => println!(\\\"I have a dog!\\\"),\\n        \\\"fish\\\" => println!(\\\"I have a fish!\\\"),\\n        \\\"cat\\\" => println!(\\\"I have a cat!\\\"),\\n        _ => println!(\\\"I have no clue what pet I have\\\"),\\n    }\\n}\\n</code></pre>\\n<h3>The rust predefined Result enum</h3>\\n<pre><code class=\\\"language-rust\\\">enum Result&#x3C;T, E> {\\n    Ok(T),\\n    Err(E),\\n}\\n</code></pre>\\n<p>Example with Result:</p>\\n<pre><code class=\\\"language-rust\\\">use std::fs::File;\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.unwrap();\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.expect(\\\"error message\\\");\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    let f = res.is_ok() {\\n        let f = res.unwrap();\\n    }\\n}\\n\\nfn main() {\\n    let res = File::open(\\\"foo\\\");\\n    match res {\\n        Ok(f) => { /* do stuff */ },\\n        Err(e) => { /* do stuff */ },\\n    }\\n}\\n</code></pre>\\n<h3>Ownership, references  &#x26; borrowing</h3>\\n<p>There are 3 rules to ownership:</p>\\n<ol>\\n<li>Each value has an owner</li>\\n<li>There is only one owner of a value</li>\\n<li>Value gets dropped if its owner goes out of scope</li>\\n</ol>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;mut i32\\n*x // a mutable i32\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">x: &#x26;i32\\n*x: // an immutable i32\\n</code></pre>\\n<p>At any time, it is possible to have one mutable reference\\nor any number of immutable references to a given value.</p>\\n<p>A borrowed variable passed to a function can be dereferenced in two ways.\\nThe first way is automated deferencing:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    s.insert_str(0, \\\"Hi, \\\");\\n}\\n</code></pre>\\n<p>And the second way is manual:</p>\\n<pre><code class=\\\"language-rust\\\">fn do_stuff(s: &#x26;mut String) {\\n    *s = String::from(\\\"Replacement\\\")\\n}\\n</code></pre>\\n<h2>Raw Pointers</h2>\\n<p><a href=\\\"https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/\\\">Programming Rust, 2nd Ed</a>:</p>\\n<p><em>Rust also has the raw pointer types *mut T and *const T. Raw\\npointers really are just like pointers in C++. Using a raw\\npointer is unsafe, because Rust makes no eﬀort to track what\\nit points to. For example, raw pointers may be null, or they\\nmay point to memory that has been freed or that now\\ncontains a value of a diﬀerent type.</em> </p>\\n<p><em>All the classic pointer\\nmistakes of C++ are oﬀered for your enjoyment.\\nHowever, you may only dereference raw pointers within an\\nunsafe block. An unsafe block is Rust’s opt-in mechanism for\\nadvanced language features whose safety is up to you.</em></p>\\n<h2>Smart Pointers</h2>\\n<p>Box is a smart pointer that allows to allocate data on the heap\\nin a straighforward way:</p>\\n<pre><code class=\\\"language-rust\\\">let t = (12, \\\"eggs\\\"); // created on the stack\\nlet b = Box::new(t); // created on the heap, but b was stored on the stack\\nprintln!(\\\"{:?}\\\", b);\\n\\nlet x = 5;\\nlet y = &#x26;x;\\nassert_eq!(5, x);\\nassert_eq!(5, *y);\\n\\nlet x = 5;\\nlet y = Box::new(x);\\nassert_eq!(5, x);\\nassert_eq!(5, *y);\\n\\nprintln!(\\\"{:?}\\\", y);\\n</code></pre>\\n<p>Rc is a reference counter that handles and count multiple references to a value.</p>\\n<pre><code class=\\\"language-rust\\\">let s1 = Rc::new(String::from(\\\"Pointer\\\"));\\nlet s2 = s1.clone();\\nlet s3 = s2.clone();\\nprintln!(\\\"{}, {},{}\\\", s1.contains(\\\"Point\\\"), s2, s3.contains(\\\"er\\\"));\\n</code></pre>\\n<p>RefCell allows to mutate data hold in an object whose reference is immutable.</p>\\n<pre><code class=\\\"language-rust\\\">use std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nstruct Flagger {\\n    is_true: RefCell&#x3C;bool>,\\n}\\n\\nlet flag= Flagger { is_true: Rc::new(RefCell::new(true)) };\\n// borrow returns Ref&#x3C;T>\\n// borrow_mut return RefMut&#x3C;T>\\n\\nlet reference = Rc::new(flag.is_true.clone());\\nprintln!(\\\"{:?}\\\", reference);\\n\\nlet mut mut_ref = reference.borrow_mut();\\n*mut_ref = false; // dereference first to access inside\\nprintln!(\\\"{}\\\", mut_ref);\\n</code></pre>\\n<h2>Error handling</h2>\\n<p>Errors split into two categories: </p>\\n<ul>\\n<li>recoverable errors which rely on the result type</li>\\n<li>unrecoverable errors where the panic macro is used. It terminates the current thread.</li>\\n</ul>\\n<p>Example on how to catch an error at opening a file:</p>\\n<pre><code class=\\\"language-rust\\\">let file = File::open(\\\"error.txt\\\");\\nlet file = match file {\\n    Ok(file) => file,\\n    Err(error) => match error.kind() {\\n        ErrorKind::NotFound => match File::create(\\\"error.txt\\\") {\\n            Ok(file_created) => file_created,\\n            Err(err) => panic!(\\\"Cannot create the file: {:?}\\\", err),\\n        },\\n        _ => panic!(\\\"It was some other error kind\\\"),\\n    },\\n};\\n</code></pre>\\n<p>Here is a simple way to panic and get information on error with logs:</p>\\n<pre><code class=\\\"language-rust\\\">let file = File::open(\\\"error.txt\\\").expect(\\\"Error opening the file!\\\");\\n</code></pre>\\n<p>Finally, an error that occurs in a function can be propagated upwards to the calling\\ncontext by adding a question mark to the calling statement like here:</p>\\n<pre><code class=\\\"language-rust\\\">fn open_file() -> Result&#x3C;File, Error> {\\n    let file = File::open(\\\"error.txt\\\")?;\\n    Ok(file)\\n}\\n</code></pre>\\n<h2>Unit test</h2>\\n<pre><code class=\\\"language-rust\\\">#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn it_works() {\\n        let result = 2 + 2;\\n        assert_ne!(result, 5);\\n    }\\n\\n    #[test]\\n    #[should_panic]\\n    fn it_fails(){\\n        panic!(\\\"Test failed!\\\");\\n    }\\n\\n    #[test]\\n    fn call_simple_add(){\\n        assert!(simple_add());\\n    }\\n\\n}\\n\\nfn simple_add() -> bool {\\n    if 2+2 == 4 {\\n        true\\n    } else {\\n        false\\n    }\\n}\\n</code></pre>\\n<h2>Concurrency</h2>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\n\\nfn main() {\\n    let handle = thread::spawn(move || {\\n        println!(\\\"Hello from a thread!\\\")\\n    });\\n\\n    handle.join().unwrap();\\n    println!(\\\"Hello from main\\\");\\n\\n}\\n</code></pre>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\n\\nfn main() {\\n    let v = vec![1, 2, 3];\\n    let mut thread_handles = Vec::new();\\n\\n    for e in v {\\n        // Here the move keyword is forcing the closure to take ownership:\\n        thread_handles.push(thread::spawn(move || println!(\\\"{:?}\\\", e)));\\n    }\\n\\n    println!(\\\"Main thread!\\\");\\n    \\n    for handle in thread_handles {\\n        handle.join().unwrap();\\n    }\\n}\\n</code></pre>\\n<p>Threads can communicate between each other with channels.\\nA channel has a transmitter and a receiver. A channel\\nis considered closed when either the transmitter or the\\nreceiver is dropped.</p>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\nuse std::sync::mpsc; // multi producer single consumer\\n\\nfn main() {\\n    let (transmitter, receiver) = mpsc::channel();\\n    \\n    let val = String::from(\\\"Transmitting!\\\");\\n    thread::spawn(move || {\\n        transmitter.send(val).unwrap();\\n    });\\n\\n    let msg = receiver.recv().unwrap();\\n    println!(\\\"{}\\\", msg);\\n}\\n</code></pre>\\n<p>Types that implement Send are safe to pass by value to another thread. They can be moved accross threads. </p>\\n<p>Types that implement Sync are safe to pass by non mutable reference to another thread. They can be shared accross threads. </p>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\nuse std::sync::Arc;\\n\\nfn main() {\\n    let rc1 = Arc::new(String::from(\\\"test\\\"));\\n    let rc2 = rc1.clone();\\n    thread::spawn(move || {\\n        rc2;\\n    });\\n}\\n</code></pre>\\n<p>Mutexes allow to manage the access of a variable by several thread.</p>\\n<pre><code class=\\\"language-rust\\\">use std::thread;\\nuse std::sync::{Arc, Mutex};\\n\\nfn main() {\\n    let counter = Arc::new(Mutex::new(0));\\n    let mut handles = vec![];\\n    \\n    for _ in 0..8 {\\n        let counter = Arc::clone(&#x26;counter);\\n        let handle = thread::spawn(move || {\\n            let mut num = counter.lock().unwrap();\\n            *num += 1;\\n        });\\n        handles.push(handle);\\n    }\\n\\n    for handle in handles {\\n        handle.join().unwrap();\\n    }\\n    \\n    println!(\\\"{}\\\", counter.lock().unwrap());\\n}\\n</code></pre>\\n<h2>Webassembly</h2>\\n<h3>Setting up of environment</h3>\\n<pre><code class=\\\"language-bash\\\">rustup update\\nrustc --version\\ncargo install cargo-generate\\ncurl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\\nnvm install 16.15.0\\n</code></pre>\\n<h3>Starting a project</h3>\\n<p>Run the command:</p>\\n<pre><code class=\\\"language-bash\\\">cargo generate --git https://github.com/rustwasm/wasm-pack-template\\n</code></pre>\\n<p>and enter a project name, e.g. wasm-game-of-life when prompted.</p>\\n<pre><code class=\\\"language-bash\\\">cd wasm-game-of-life\\nwasm-pack build\\nnpm init wasm-app www\\ncd www\\nnpm start\\n</code></pre>\",\"id\":\"/Users/nicolas/repos/github.com/nperon/workshop/src/pages/2022-02-06-rust/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2022-02-06T10:17:00.823Z\",\"path\":\"/rust\",\"title\":\"Rust\",\"excerpt\":\"\",\"tags\":[\"rust\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/kubernetes.json\n// module id = 451\n// module chunks = 54858438791056"],"sourceRoot":""}