{"version":3,"sources":["webpack:///path---es-6-toolbox-6628f523e5a9642d2a22.js","webpack:///./.cache/json/es-6-toolbox.json"],"names":["webpackJsonp","379","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","prev","id","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,qwCAAiwCC,aAAgCC,MAAA,cAAAC,KAAA,gBAAAC,KAAA,eAAAC,MAAA,6EAAAC,QAAA,MAAuKC,aAAgBC,MAAQR,KAAA,maAAAS,GAAA,6GAAAR,aAA6iBE,KAAA,2BAAAC,KAAA,YAAAF,MAAA,WAAAI,QAAA,WAAAD,MAAA,cAAkHK,MAASV,KAAA,itGAA20CS,GAAA,6GAAAR,aAAshEE,KAAA,2BAAAC,KAAA,YAAAF,MAAA,4DAAAI,QAAA,GAAAD,MAAA","file":"path---es-6-toolbox-6628f523e5a9642d2a22.js","sourcesContent":["webpackJsonp([264709711041873],{\n\n/***/ 379:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Memoization</h2>\\n<p>In the following snippet, function memoization is implemented with some convenient functional programming features of javascript.</p>\\n<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let n = args[0];\\n    if (n in cache) {\\n      return cache[n];\\n    }\\n    else {\\n      let result = fn(n);\\n      cache[n] = result;\\n      return result;\\n    }\\n  }\\n}\\n</code></pre>\\n<p>This memoize function can be\\nused for instance in calculating Fibonacci\\nseries as follows:</p>\\n<pre><code class=\\\"language-javascript\\\">const memoizeFib = memoize(fib);\\n\\nfunction fib(num) {\\n  switch (num) {\\n    case 0: {\\n      return 0;\\n    }\\n    case 1: {\\n      return 1;\\n    }\\n    default: {\\n      return memoizeFib(num-2)+memoizeFib(num-1); \\n    }\\n  }\\n}\\n</code></pre>\\n<p>The following is a slightly different version of memoize.\\nArguments of the function, which operate as the cache keys,\\nare stringified: </p>\\n<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let stringifiedArgs = JSON.stringify(args);\\n    let result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn(...args);\\n    return result;\\n  }\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"ES6 toolbox\",\"date\":\"July 21, 2018\",\"path\":\"/es6-toolbox\",\"tags\":[\"javascript\",\"es6\",\"toolbox\",\"utils\",\"functional programming\",\"memoization\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p><em>This text will be italic</em>\\n<em>This will also be italic</em></p>\\n<p><strong>This text will be bold</strong>\\n<strong>This will also be bold</strong></p>\\n<p><em>You <strong>can</strong> combine them</em></p>\\n<h1>This is a possible title</h1>\\n<p>...and more documentation provided by Github at\\n<a href=\\\"https://guides.github.com/features/mastering-markdown/#what\\\">Mastering markdown Github page</a></p>\",\"id\":\"/home/nicolas/Documents/workshop/src/pages/2018-07-20-markdown/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-20T14:24:43.180Z\",\"path\":\"/markdown\",\"title\":\"Markdown\",\"excerpt\":\"Markdown\",\"tags\":[\"markdown\"]}},\"next\":{\"html\":\"<h3>Installing Jhipster</h3>\\n<pre><code>npm install -g generator-jhipster\\n</code></pre>\\n<pre><code>jhipster --version\\n</code></pre>\\n<h3>Generating an app</h3>\\n<pre><code>mkdir myPOC &#x26;&#x26; cd myPOC\\n</code></pre>\\n<pre><code>jhipster\\n</code></pre>\\n<pre><code>code .\\n</code></pre>\\n<pre><code>npm install\\n</code></pre>\\n<p>Hints on available spring boot options can be displayed with:</p>\\n<pre><code>mvn spring-boot:help\\n</code></pre>\\n<p>The application can be started with the dev profile with: </p>\\n<pre><code>mvn spring-boot:build-info\\n</code></pre>\\n<p>followed with:</p>\\n<pre><code>mvn spring-boot:run\\n</code></pre>\\n<p>As an alternative to all of the mvn spring-boot commands above, the user may just run the mvnw available in the application root:</p>\\n<pre><code>./mvnw\\n</code></pre>\\n<pre><code>npm start\\n</code></pre>\\n<p>To generate entities according to the application requirements, open a text editor like gedit and code a jdl language snipet with a <code>.jh</code> extension describing the different entities and their relationships:</p>\\n<pre><code>gedit src/main/resources/entities.jh &#x26;\\n</code></pre>\\n<p>Sample jh files with entities are available for instance in the <a href=\\\"https://github.com/jhipster/jdl-samples\\\">jdl-samples jhipster project on github</a>. Skip the <code>application { ... }</code> statement in your snippet as your application options are already set and you only want to describe your entities at this stage. Once your <code>entities.jh</code> file is ready, go ahead and generate the entities with:</p>\\n<pre><code>jhipster import-jdl src/main/resources/entities.jh\\n</code></pre>\\n<p>To package the application as a “production” JAR in the target directory, type:</p>\\n<pre><code>./mvnw -Pprod clean verify\\n</code></pre>\\n<h3>Leveraging docker according to the selected Jhipster options</h3>\\n<p>A number of possible options in using Jhipster are described in the README.md file of the project folder.</p>\\n<p>In case the JHipster Registry option was selected, the registry app can be run from the Docker image available in the application src/main/docker directory with: </p>\\n<pre><code>docker-compose -f src/main/docker/jhipster-registry.yml up\\n</code></pre>\\n<p>If you chose OAuth 2.0 as your authentication, Keycloak is used as the default identity provider. Running </p>\\n<pre><code>docker-compose -f src/main/docker/keycloak.yml up\\n</code></pre>\\n<p>starts up Keycloak automatically. A number of other docker-compose scripts can be availabla in the <code>src/main/docker/</code> directory, depending on the options set initially while generating the app. For instance it could well be that a <code>mysql.yml</code> docker-compose script is available to run a container with a mysql database required in dev mode. All of these docker-compose scripts can be run following the same <code>docker-compose</code> command pattern as stated above.</p>\\n<h3>Jhipster Marketplace modules of interest</h3>\\n<p>Kafka</p>\\n<p>Stripe Payment </p>\\n<p>Paypal</p>\\n<p>Blockchain</p>\\n<h3>Links</h3>\\n<p><a href=\\\"https://www.jhipster.tech/\\\">JHipster Homepage</a></p>\\n<p><a href=\\\"https://start.jhipster.tech/jdl-studio/\\\">JDL Studio</a></p>\\n<p><a href=\\\"https://github.com/jhipster\\\">JHipster github page</a></p>\",\"id\":\"/home/nicolas/Documents/workshop/src/pages/2020-07-05-jhipster/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-07-05T18:51:12.235Z\",\"path\":\"/jhipster\",\"title\":\"Generate and deploy a Java app on the cloud with Jhipster\",\"excerpt\":\"\",\"tags\":[\"jhipster\",\"aws\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---es-6-toolbox-6628f523e5a9642d2a22.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Memoization</h2>\\n<p>In the following snippet, function memoization is implemented with some convenient functional programming features of javascript.</p>\\n<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let n = args[0];\\n    if (n in cache) {\\n      return cache[n];\\n    }\\n    else {\\n      let result = fn(n);\\n      cache[n] = result;\\n      return result;\\n    }\\n  }\\n}\\n</code></pre>\\n<p>This memoize function can be\\nused for instance in calculating Fibonacci\\nseries as follows:</p>\\n<pre><code class=\\\"language-javascript\\\">const memoizeFib = memoize(fib);\\n\\nfunction fib(num) {\\n  switch (num) {\\n    case 0: {\\n      return 0;\\n    }\\n    case 1: {\\n      return 1;\\n    }\\n    default: {\\n      return memoizeFib(num-2)+memoizeFib(num-1); \\n    }\\n  }\\n}\\n</code></pre>\\n<p>The following is a slightly different version of memoize.\\nArguments of the function, which operate as the cache keys,\\nare stringified: </p>\\n<pre><code class=\\\"language-javascript\\\">const memoize = (fn) => {\\n  let cache = {};\\n  return (...args) => {\\n    let stringifiedArgs = JSON.stringify(args);\\n    let result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn(...args);\\n    return result;\\n  }\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"ES6 toolbox\",\"date\":\"July 21, 2018\",\"path\":\"/es6-toolbox\",\"tags\":[\"javascript\",\"es6\",\"toolbox\",\"utils\",\"functional programming\",\"memoization\"],\"excerpt\":\"\"}}},\"pathContext\":{\"prev\":{\"html\":\"<p><em>This text will be italic</em>\\n<em>This will also be italic</em></p>\\n<p><strong>This text will be bold</strong>\\n<strong>This will also be bold</strong></p>\\n<p><em>You <strong>can</strong> combine them</em></p>\\n<h1>This is a possible title</h1>\\n<p>...and more documentation provided by Github at\\n<a href=\\\"https://guides.github.com/features/mastering-markdown/#what\\\">Mastering markdown Github page</a></p>\",\"id\":\"/home/nicolas/Documents/workshop/src/pages/2018-07-20-markdown/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-07-20T14:24:43.180Z\",\"path\":\"/markdown\",\"title\":\"Markdown\",\"excerpt\":\"Markdown\",\"tags\":[\"markdown\"]}},\"next\":{\"html\":\"<h3>Installing Jhipster</h3>\\n<pre><code>npm install -g generator-jhipster\\n</code></pre>\\n<pre><code>jhipster --version\\n</code></pre>\\n<h3>Generating an app</h3>\\n<pre><code>mkdir myPOC &#x26;&#x26; cd myPOC\\n</code></pre>\\n<pre><code>jhipster\\n</code></pre>\\n<pre><code>code .\\n</code></pre>\\n<pre><code>npm install\\n</code></pre>\\n<p>Hints on available spring boot options can be displayed with:</p>\\n<pre><code>mvn spring-boot:help\\n</code></pre>\\n<p>The application can be started with the dev profile with: </p>\\n<pre><code>mvn spring-boot:build-info\\n</code></pre>\\n<p>followed with:</p>\\n<pre><code>mvn spring-boot:run\\n</code></pre>\\n<p>As an alternative to all of the mvn spring-boot commands above, the user may just run the mvnw available in the application root:</p>\\n<pre><code>./mvnw\\n</code></pre>\\n<pre><code>npm start\\n</code></pre>\\n<p>To generate entities according to the application requirements, open a text editor like gedit and code a jdl language snipet with a <code>.jh</code> extension describing the different entities and their relationships:</p>\\n<pre><code>gedit src/main/resources/entities.jh &#x26;\\n</code></pre>\\n<p>Sample jh files with entities are available for instance in the <a href=\\\"https://github.com/jhipster/jdl-samples\\\">jdl-samples jhipster project on github</a>. Skip the <code>application { ... }</code> statement in your snippet as your application options are already set and you only want to describe your entities at this stage. Once your <code>entities.jh</code> file is ready, go ahead and generate the entities with:</p>\\n<pre><code>jhipster import-jdl src/main/resources/entities.jh\\n</code></pre>\\n<p>To package the application as a “production” JAR in the target directory, type:</p>\\n<pre><code>./mvnw -Pprod clean verify\\n</code></pre>\\n<h3>Leveraging docker according to the selected Jhipster options</h3>\\n<p>A number of possible options in using Jhipster are described in the README.md file of the project folder.</p>\\n<p>In case the JHipster Registry option was selected, the registry app can be run from the Docker image available in the application src/main/docker directory with: </p>\\n<pre><code>docker-compose -f src/main/docker/jhipster-registry.yml up\\n</code></pre>\\n<p>If you chose OAuth 2.0 as your authentication, Keycloak is used as the default identity provider. Running </p>\\n<pre><code>docker-compose -f src/main/docker/keycloak.yml up\\n</code></pre>\\n<p>starts up Keycloak automatically. A number of other docker-compose scripts can be availabla in the <code>src/main/docker/</code> directory, depending on the options set initially while generating the app. For instance it could well be that a <code>mysql.yml</code> docker-compose script is available to run a container with a mysql database required in dev mode. All of these docker-compose scripts can be run following the same <code>docker-compose</code> command pattern as stated above.</p>\\n<h3>Jhipster Marketplace modules of interest</h3>\\n<p>Kafka</p>\\n<p>Stripe Payment </p>\\n<p>Paypal</p>\\n<p>Blockchain</p>\\n<h3>Links</h3>\\n<p><a href=\\\"https://www.jhipster.tech/\\\">JHipster Homepage</a></p>\\n<p><a href=\\\"https://start.jhipster.tech/jdl-studio/\\\">JDL Studio</a></p>\\n<p><a href=\\\"https://github.com/jhipster\\\">JHipster github page</a></p>\",\"id\":\"/home/nicolas/Documents/workshop/src/pages/2020-07-05-jhipster/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2020-07-05T18:51:12.235Z\",\"path\":\"/jhipster\",\"title\":\"Generate and deploy a Java app on the cloud with Jhipster\",\"excerpt\":\"\",\"tags\":[\"jhipster\",\"aws\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/es-6-toolbox.json\n// module id = 379\n// module chunks = 264709711041873"],"sourceRoot":""}